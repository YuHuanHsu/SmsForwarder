// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.materialspinner.MaterialSpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogRuleTestBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialEditText etContent;

  @NonNull
  public final MaterialEditText etFrom;

  @NonNull
  public final MaterialEditText etTitle;

  @NonNull
  public final RadioButton rbSimSlot1;

  @NonNull
  public final RadioButton rbSimSlot2;

  @NonNull
  public final RadioGroup rgSimSlot;

  @NonNull
  public final MaterialSpinner spCallType;

  @NonNull
  public final TextView tvCallType;

  @NonNull
  public final TextView tvContent;

  @NonNull
  public final TextView tvFrom;

  @NonNull
  public final TextView tvSimSlot;

  @NonNull
  public final TextView tvTitle;

  private DialogRuleTestBinding(@NonNull LinearLayout rootView, @NonNull MaterialEditText etContent,
      @NonNull MaterialEditText etFrom, @NonNull MaterialEditText etTitle,
      @NonNull RadioButton rbSimSlot1, @NonNull RadioButton rbSimSlot2,
      @NonNull RadioGroup rgSimSlot, @NonNull MaterialSpinner spCallType,
      @NonNull TextView tvCallType, @NonNull TextView tvContent, @NonNull TextView tvFrom,
      @NonNull TextView tvSimSlot, @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.etContent = etContent;
    this.etFrom = etFrom;
    this.etTitle = etTitle;
    this.rbSimSlot1 = rbSimSlot1;
    this.rbSimSlot2 = rbSimSlot2;
    this.rgSimSlot = rgSimSlot;
    this.spCallType = spCallType;
    this.tvCallType = tvCallType;
    this.tvContent = tvContent;
    this.tvFrom = tvFrom;
    this.tvSimSlot = tvSimSlot;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogRuleTestBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogRuleTestBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_rule_test, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogRuleTestBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.et_content;
      MaterialEditText etContent = ViewBindings.findChildViewById(rootView, id);
      if (etContent == null) {
        break missingId;
      }

      id = R.id.et_from;
      MaterialEditText etFrom = ViewBindings.findChildViewById(rootView, id);
      if (etFrom == null) {
        break missingId;
      }

      id = R.id.et_title;
      MaterialEditText etTitle = ViewBindings.findChildViewById(rootView, id);
      if (etTitle == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_1;
      RadioButton rbSimSlot1 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot1 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_2;
      RadioButton rbSimSlot2 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot2 == null) {
        break missingId;
      }

      id = R.id.rg_sim_slot;
      RadioGroup rgSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (rgSimSlot == null) {
        break missingId;
      }

      id = R.id.sp_call_type;
      MaterialSpinner spCallType = ViewBindings.findChildViewById(rootView, id);
      if (spCallType == null) {
        break missingId;
      }

      id = R.id.tv_call_type;
      TextView tvCallType = ViewBindings.findChildViewById(rootView, id);
      if (tvCallType == null) {
        break missingId;
      }

      id = R.id.tv_content;
      TextView tvContent = ViewBindings.findChildViewById(rootView, id);
      if (tvContent == null) {
        break missingId;
      }

      id = R.id.tv_from;
      TextView tvFrom = ViewBindings.findChildViewById(rootView, id);
      if (tvFrom == null) {
        break missingId;
      }

      id = R.id.tv_sim_slot;
      TextView tvSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (tvSimSlot == null) {
        break missingId;
      }

      id = R.id.tv_title;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new DialogRuleTestBinding((LinearLayout) rootView, etContent, etFrom, etTitle,
          rbSimSlot1, rbSimSlot2, rgSimSlot, spCallType, tvCallType, tvContent, tvFrom, tvSimSlot,
          tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
