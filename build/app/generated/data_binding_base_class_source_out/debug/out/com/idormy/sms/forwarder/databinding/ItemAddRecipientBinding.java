// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAddRecipientBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RippleShadowShadowButton btnFilePicker;

  @NonNull
  public final MaterialEditText etRecipientEmail;

  @NonNull
  public final MaterialEditText etRecipientKeystore;

  @NonNull
  public final MaterialEditText etRecipientPassword;

  @NonNull
  public final ImageView ivDel;

  @NonNull
  public final LinearLayout layoutRecipientKeystore;

  private ItemAddRecipientBinding(@NonNull LinearLayout rootView,
      @NonNull RippleShadowShadowButton btnFilePicker, @NonNull MaterialEditText etRecipientEmail,
      @NonNull MaterialEditText etRecipientKeystore, @NonNull MaterialEditText etRecipientPassword,
      @NonNull ImageView ivDel, @NonNull LinearLayout layoutRecipientKeystore) {
    this.rootView = rootView;
    this.btnFilePicker = btnFilePicker;
    this.etRecipientEmail = etRecipientEmail;
    this.etRecipientKeystore = etRecipientKeystore;
    this.etRecipientPassword = etRecipientPassword;
    this.ivDel = ivDel;
    this.layoutRecipientKeystore = layoutRecipientKeystore;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAddRecipientBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAddRecipientBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_add_recipient, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAddRecipientBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_file_picker;
      RippleShadowShadowButton btnFilePicker = ViewBindings.findChildViewById(rootView, id);
      if (btnFilePicker == null) {
        break missingId;
      }

      id = R.id.et_recipient_email;
      MaterialEditText etRecipientEmail = ViewBindings.findChildViewById(rootView, id);
      if (etRecipientEmail == null) {
        break missingId;
      }

      id = R.id.et_recipient_keystore;
      MaterialEditText etRecipientKeystore = ViewBindings.findChildViewById(rootView, id);
      if (etRecipientKeystore == null) {
        break missingId;
      }

      id = R.id.et_recipient_password;
      MaterialEditText etRecipientPassword = ViewBindings.findChildViewById(rootView, id);
      if (etRecipientPassword == null) {
        break missingId;
      }

      id = R.id.iv_del;
      ImageView ivDel = ViewBindings.findChildViewById(rootView, id);
      if (ivDel == null) {
        break missingId;
      }

      id = R.id.layout_recipient_keystore;
      LinearLayout layoutRecipientKeystore = ViewBindings.findChildViewById(rootView, id);
      if (layoutRecipientKeystore == null) {
        break missingId;
      }

      return new ItemAddRecipientBinding((LinearLayout) rootView, btnFilePicker, etRecipientEmail,
          etRecipientKeystore, etRecipientPassword, ivDel, layoutRecipientKeystore);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
