// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.SmoothCheckBox;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.ClearEditText;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.picker.XSeekBar;
import com.xuexiang.xui.widget.spinner.editspinner.EditSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTasksActionSettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etAppList;

  @NonNull
  public final EditText etMinDistance;

  @NonNull
  public final EditText etMinInterval;

  @NonNull
  public final ClearEditText etSafePhone;

  @NonNull
  public final LinearLayout layoutAppList;

  @NonNull
  public final LinearLayout layoutLocationSetting;

  @NonNull
  public final LinearLayout layoutOptionalAction;

  @NonNull
  public final LinearLayout layoutSpApp;

  @NonNull
  public final RadioButton rbAccuracyCoarse;

  @NonNull
  public final RadioButton rbAccuracyFine;

  @NonNull
  public final RadioButton rbAccuracyNoRequirement;

  @NonNull
  public final RadioButton rbPowerRequirementHigh;

  @NonNull
  public final RadioButton rbPowerRequirementLow;

  @NonNull
  public final RadioButton rbPowerRequirementMedium;

  @NonNull
  public final RadioButton rbPowerRequirementNoRequirement;

  @NonNull
  public final RadioGroup rgAccuracy;

  @NonNull
  public final RadioGroup rgPowerRequirement;

  @NonNull
  public final SwitchButton sbEnableAppNotify;

  @NonNull
  public final SwitchButton sbEnableLoadAppList;

  @NonNull
  public final SwitchButton sbEnableLocation;

  @NonNull
  public final SwitchButton sbEnablePhone;

  @NonNull
  public final SwitchButton sbEnableSms;

  @NonNull
  public final SwitchButton sbEnableSmsCommand;

  @NonNull
  public final SmoothCheckBox scbCallType1;

  @NonNull
  public final SmoothCheckBox scbCallType2;

  @NonNull
  public final SmoothCheckBox scbCallType3;

  @NonNull
  public final SmoothCheckBox scbCallType4;

  @NonNull
  public final SmoothCheckBox scbCallType5;

  @NonNull
  public final SmoothCheckBox scbCallType6;

  @NonNull
  public final SmoothCheckBox scbCancelAppNotify;

  @NonNull
  public final SmoothCheckBox scbLoadSystemApp;

  @NonNull
  public final SmoothCheckBox scbLoadUserApp;

  @NonNull
  public final SmoothCheckBox scbNotUserPresent;

  @NonNull
  public final EditSpinner spApp;

  @NonNull
  public final XSeekBar xsbDuplicateMessagesLimits;

  private FragmentTasksActionSettingsBinding(@NonNull LinearLayout rootView,
      @NonNull SuperButton btnDel, @NonNull SuperButton btnSave, @NonNull SuperButton btnTest,
      @NonNull MaterialEditText etAppList, @NonNull EditText etMinDistance,
      @NonNull EditText etMinInterval, @NonNull ClearEditText etSafePhone,
      @NonNull LinearLayout layoutAppList, @NonNull LinearLayout layoutLocationSetting,
      @NonNull LinearLayout layoutOptionalAction, @NonNull LinearLayout layoutSpApp,
      @NonNull RadioButton rbAccuracyCoarse, @NonNull RadioButton rbAccuracyFine,
      @NonNull RadioButton rbAccuracyNoRequirement, @NonNull RadioButton rbPowerRequirementHigh,
      @NonNull RadioButton rbPowerRequirementLow, @NonNull RadioButton rbPowerRequirementMedium,
      @NonNull RadioButton rbPowerRequirementNoRequirement, @NonNull RadioGroup rgAccuracy,
      @NonNull RadioGroup rgPowerRequirement, @NonNull SwitchButton sbEnableAppNotify,
      @NonNull SwitchButton sbEnableLoadAppList, @NonNull SwitchButton sbEnableLocation,
      @NonNull SwitchButton sbEnablePhone, @NonNull SwitchButton sbEnableSms,
      @NonNull SwitchButton sbEnableSmsCommand, @NonNull SmoothCheckBox scbCallType1,
      @NonNull SmoothCheckBox scbCallType2, @NonNull SmoothCheckBox scbCallType3,
      @NonNull SmoothCheckBox scbCallType4, @NonNull SmoothCheckBox scbCallType5,
      @NonNull SmoothCheckBox scbCallType6, @NonNull SmoothCheckBox scbCancelAppNotify,
      @NonNull SmoothCheckBox scbLoadSystemApp, @NonNull SmoothCheckBox scbLoadUserApp,
      @NonNull SmoothCheckBox scbNotUserPresent, @NonNull EditSpinner spApp,
      @NonNull XSeekBar xsbDuplicateMessagesLimits) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnTest = btnTest;
    this.etAppList = etAppList;
    this.etMinDistance = etMinDistance;
    this.etMinInterval = etMinInterval;
    this.etSafePhone = etSafePhone;
    this.layoutAppList = layoutAppList;
    this.layoutLocationSetting = layoutLocationSetting;
    this.layoutOptionalAction = layoutOptionalAction;
    this.layoutSpApp = layoutSpApp;
    this.rbAccuracyCoarse = rbAccuracyCoarse;
    this.rbAccuracyFine = rbAccuracyFine;
    this.rbAccuracyNoRequirement = rbAccuracyNoRequirement;
    this.rbPowerRequirementHigh = rbPowerRequirementHigh;
    this.rbPowerRequirementLow = rbPowerRequirementLow;
    this.rbPowerRequirementMedium = rbPowerRequirementMedium;
    this.rbPowerRequirementNoRequirement = rbPowerRequirementNoRequirement;
    this.rgAccuracy = rgAccuracy;
    this.rgPowerRequirement = rgPowerRequirement;
    this.sbEnableAppNotify = sbEnableAppNotify;
    this.sbEnableLoadAppList = sbEnableLoadAppList;
    this.sbEnableLocation = sbEnableLocation;
    this.sbEnablePhone = sbEnablePhone;
    this.sbEnableSms = sbEnableSms;
    this.sbEnableSmsCommand = sbEnableSmsCommand;
    this.scbCallType1 = scbCallType1;
    this.scbCallType2 = scbCallType2;
    this.scbCallType3 = scbCallType3;
    this.scbCallType4 = scbCallType4;
    this.scbCallType5 = scbCallType5;
    this.scbCallType6 = scbCallType6;
    this.scbCancelAppNotify = scbCancelAppNotify;
    this.scbLoadSystemApp = scbLoadSystemApp;
    this.scbLoadUserApp = scbLoadUserApp;
    this.scbNotUserPresent = scbNotUserPresent;
    this.spApp = spApp;
    this.xsbDuplicateMessagesLimits = xsbDuplicateMessagesLimits;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTasksActionSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTasksActionSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tasks_action_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTasksActionSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_app_list;
      MaterialEditText etAppList = ViewBindings.findChildViewById(rootView, id);
      if (etAppList == null) {
        break missingId;
      }

      id = R.id.et_min_distance;
      EditText etMinDistance = ViewBindings.findChildViewById(rootView, id);
      if (etMinDistance == null) {
        break missingId;
      }

      id = R.id.et_min_interval;
      EditText etMinInterval = ViewBindings.findChildViewById(rootView, id);
      if (etMinInterval == null) {
        break missingId;
      }

      id = R.id.et_safe_phone;
      ClearEditText etSafePhone = ViewBindings.findChildViewById(rootView, id);
      if (etSafePhone == null) {
        break missingId;
      }

      id = R.id.layout_app_list;
      LinearLayout layoutAppList = ViewBindings.findChildViewById(rootView, id);
      if (layoutAppList == null) {
        break missingId;
      }

      id = R.id.layout_location_setting;
      LinearLayout layoutLocationSetting = ViewBindings.findChildViewById(rootView, id);
      if (layoutLocationSetting == null) {
        break missingId;
      }

      id = R.id.layout_optional_action;
      LinearLayout layoutOptionalAction = ViewBindings.findChildViewById(rootView, id);
      if (layoutOptionalAction == null) {
        break missingId;
      }

      id = R.id.layout_sp_app;
      LinearLayout layoutSpApp = ViewBindings.findChildViewById(rootView, id);
      if (layoutSpApp == null) {
        break missingId;
      }

      id = R.id.rb_accuracy_coarse;
      RadioButton rbAccuracyCoarse = ViewBindings.findChildViewById(rootView, id);
      if (rbAccuracyCoarse == null) {
        break missingId;
      }

      id = R.id.rb_accuracy_fine;
      RadioButton rbAccuracyFine = ViewBindings.findChildViewById(rootView, id);
      if (rbAccuracyFine == null) {
        break missingId;
      }

      id = R.id.rb_accuracy_no_requirement;
      RadioButton rbAccuracyNoRequirement = ViewBindings.findChildViewById(rootView, id);
      if (rbAccuracyNoRequirement == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_high;
      RadioButton rbPowerRequirementHigh = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementHigh == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_low;
      RadioButton rbPowerRequirementLow = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementLow == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_medium;
      RadioButton rbPowerRequirementMedium = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementMedium == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_no_requirement;
      RadioButton rbPowerRequirementNoRequirement = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementNoRequirement == null) {
        break missingId;
      }

      id = R.id.rg_accuracy;
      RadioGroup rgAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (rgAccuracy == null) {
        break missingId;
      }

      id = R.id.rg_power_requirement;
      RadioGroup rgPowerRequirement = ViewBindings.findChildViewById(rootView, id);
      if (rgPowerRequirement == null) {
        break missingId;
      }

      id = R.id.sb_enable_app_notify;
      SwitchButton sbEnableAppNotify = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableAppNotify == null) {
        break missingId;
      }

      id = R.id.sb_enable_load_app_list;
      SwitchButton sbEnableLoadAppList = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableLoadAppList == null) {
        break missingId;
      }

      id = R.id.sb_enable_location;
      SwitchButton sbEnableLocation = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableLocation == null) {
        break missingId;
      }

      id = R.id.sb_enable_phone;
      SwitchButton sbEnablePhone = ViewBindings.findChildViewById(rootView, id);
      if (sbEnablePhone == null) {
        break missingId;
      }

      id = R.id.sb_enable_sms;
      SwitchButton sbEnableSms = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableSms == null) {
        break missingId;
      }

      id = R.id.sb_enable_sms_command;
      SwitchButton sbEnableSmsCommand = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableSmsCommand == null) {
        break missingId;
      }

      id = R.id.scb_call_type1;
      SmoothCheckBox scbCallType1 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType1 == null) {
        break missingId;
      }

      id = R.id.scb_call_type2;
      SmoothCheckBox scbCallType2 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType2 == null) {
        break missingId;
      }

      id = R.id.scb_call_type3;
      SmoothCheckBox scbCallType3 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType3 == null) {
        break missingId;
      }

      id = R.id.scb_call_type4;
      SmoothCheckBox scbCallType4 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType4 == null) {
        break missingId;
      }

      id = R.id.scb_call_type5;
      SmoothCheckBox scbCallType5 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType5 == null) {
        break missingId;
      }

      id = R.id.scb_call_type6;
      SmoothCheckBox scbCallType6 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType6 == null) {
        break missingId;
      }

      id = R.id.scb_cancel_app_notify;
      SmoothCheckBox scbCancelAppNotify = ViewBindings.findChildViewById(rootView, id);
      if (scbCancelAppNotify == null) {
        break missingId;
      }

      id = R.id.scb_load_system_app;
      SmoothCheckBox scbLoadSystemApp = ViewBindings.findChildViewById(rootView, id);
      if (scbLoadSystemApp == null) {
        break missingId;
      }

      id = R.id.scb_load_user_app;
      SmoothCheckBox scbLoadUserApp = ViewBindings.findChildViewById(rootView, id);
      if (scbLoadUserApp == null) {
        break missingId;
      }

      id = R.id.scb_not_user_present;
      SmoothCheckBox scbNotUserPresent = ViewBindings.findChildViewById(rootView, id);
      if (scbNotUserPresent == null) {
        break missingId;
      }

      id = R.id.sp_app;
      EditSpinner spApp = ViewBindings.findChildViewById(rootView, id);
      if (spApp == null) {
        break missingId;
      }

      id = R.id.xsb_duplicate_messages_limits;
      XSeekBar xsbDuplicateMessagesLimits = ViewBindings.findChildViewById(rootView, id);
      if (xsbDuplicateMessagesLimits == null) {
        break missingId;
      }

      return new FragmentTasksActionSettingsBinding((LinearLayout) rootView, btnDel, btnSave,
          btnTest, etAppList, etMinDistance, etMinInterval, etSafePhone, layoutAppList,
          layoutLocationSetting, layoutOptionalAction, layoutSpApp, rbAccuracyCoarse,
          rbAccuracyFine, rbAccuracyNoRequirement, rbPowerRequirementHigh, rbPowerRequirementLow,
          rbPowerRequirementMedium, rbPowerRequirementNoRequirement, rgAccuracy, rgPowerRequirement,
          sbEnableAppNotify, sbEnableLoadAppList, sbEnableLocation, sbEnablePhone, sbEnableSms,
          sbEnableSmsCommand, scbCallType1, scbCallType2, scbCallType3, scbCallType4, scbCallType5,
          scbCallType6, scbCancelAppNotify, scbLoadSystemApp, scbLoadUserApp, scbNotUserPresent,
          spApp, xsbDuplicateMessagesLimits);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
