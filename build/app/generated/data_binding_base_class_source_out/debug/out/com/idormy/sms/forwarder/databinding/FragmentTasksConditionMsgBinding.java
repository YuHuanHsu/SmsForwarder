// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.editspinner.EditSpinner;
import com.xuexiang.xui.widget.spinner.materialspinner.MaterialSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTasksConditionMsgBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etValue;

  @NonNull
  public final AppCompatImageView ivTaskApp;

  @NonNull
  public final AppCompatImageView ivTaskCall;

  @NonNull
  public final AppCompatImageView ivTaskSms;

  @NonNull
  public final LinearLayout layoutAppList;

  @NonNull
  public final LinearLayout layoutMatchType;

  @NonNull
  public final LinearLayout layoutMatchValue;

  @NonNull
  public final LinearLayout layoutSimSlot;

  @NonNull
  public final RadioButton rbCallType;

  @NonNull
  public final RadioButton rbContain;

  @NonNull
  public final RadioButton rbContent;

  @NonNull
  public final RadioButton rbEndWith;

  @NonNull
  public final RadioButton rbInformContent;

  @NonNull
  public final RadioButton rbIs;

  @NonNull
  public final RadioButton rbMultiMatch;

  @NonNull
  public final RadioButton rbNotContain;

  @NonNull
  public final RadioButton rbPackageName;

  @NonNull
  public final RadioButton rbPhone;

  @NonNull
  public final RadioButton rbRegex;

  @NonNull
  public final RadioButton rbSimSlot1;

  @NonNull
  public final RadioButton rbSimSlot2;

  @NonNull
  public final RadioButton rbSimSlotAll;

  @NonNull
  public final RadioButton rbStartWith;

  @NonNull
  public final RadioButton rbTranspondAll;

  @NonNull
  public final RadioButton rbUid;

  @NonNull
  public final RadioGroup rgCheck;

  @NonNull
  public final RadioGroup rgCheck2;

  @NonNull
  public final RadioGroup rgFiled;

  @NonNull
  public final RadioGroup rgSimSlot;

  @NonNull
  public final EditSpinner spApp;

  @NonNull
  public final MaterialSpinner spCallType;

  @NonNull
  public final TextView tvMuRuleTips;

  private FragmentTasksConditionMsgBinding(@NonNull LinearLayout rootView,
      @NonNull SuperButton btnDel, @NonNull SuperButton btnSave, @NonNull SuperButton btnTest,
      @NonNull MaterialEditText etValue, @NonNull AppCompatImageView ivTaskApp,
      @NonNull AppCompatImageView ivTaskCall, @NonNull AppCompatImageView ivTaskSms,
      @NonNull LinearLayout layoutAppList, @NonNull LinearLayout layoutMatchType,
      @NonNull LinearLayout layoutMatchValue, @NonNull LinearLayout layoutSimSlot,
      @NonNull RadioButton rbCallType, @NonNull RadioButton rbContain,
      @NonNull RadioButton rbContent, @NonNull RadioButton rbEndWith,
      @NonNull RadioButton rbInformContent, @NonNull RadioButton rbIs,
      @NonNull RadioButton rbMultiMatch, @NonNull RadioButton rbNotContain,
      @NonNull RadioButton rbPackageName, @NonNull RadioButton rbPhone,
      @NonNull RadioButton rbRegex, @NonNull RadioButton rbSimSlot1,
      @NonNull RadioButton rbSimSlot2, @NonNull RadioButton rbSimSlotAll,
      @NonNull RadioButton rbStartWith, @NonNull RadioButton rbTranspondAll,
      @NonNull RadioButton rbUid, @NonNull RadioGroup rgCheck, @NonNull RadioGroup rgCheck2,
      @NonNull RadioGroup rgFiled, @NonNull RadioGroup rgSimSlot, @NonNull EditSpinner spApp,
      @NonNull MaterialSpinner spCallType, @NonNull TextView tvMuRuleTips) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnTest = btnTest;
    this.etValue = etValue;
    this.ivTaskApp = ivTaskApp;
    this.ivTaskCall = ivTaskCall;
    this.ivTaskSms = ivTaskSms;
    this.layoutAppList = layoutAppList;
    this.layoutMatchType = layoutMatchType;
    this.layoutMatchValue = layoutMatchValue;
    this.layoutSimSlot = layoutSimSlot;
    this.rbCallType = rbCallType;
    this.rbContain = rbContain;
    this.rbContent = rbContent;
    this.rbEndWith = rbEndWith;
    this.rbInformContent = rbInformContent;
    this.rbIs = rbIs;
    this.rbMultiMatch = rbMultiMatch;
    this.rbNotContain = rbNotContain;
    this.rbPackageName = rbPackageName;
    this.rbPhone = rbPhone;
    this.rbRegex = rbRegex;
    this.rbSimSlot1 = rbSimSlot1;
    this.rbSimSlot2 = rbSimSlot2;
    this.rbSimSlotAll = rbSimSlotAll;
    this.rbStartWith = rbStartWith;
    this.rbTranspondAll = rbTranspondAll;
    this.rbUid = rbUid;
    this.rgCheck = rgCheck;
    this.rgCheck2 = rgCheck2;
    this.rgFiled = rgFiled;
    this.rgSimSlot = rgSimSlot;
    this.spApp = spApp;
    this.spCallType = spCallType;
    this.tvMuRuleTips = tvMuRuleTips;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTasksConditionMsgBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTasksConditionMsgBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tasks_condition_msg, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTasksConditionMsgBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_value;
      MaterialEditText etValue = ViewBindings.findChildViewById(rootView, id);
      if (etValue == null) {
        break missingId;
      }

      id = R.id.iv_task_app;
      AppCompatImageView ivTaskApp = ViewBindings.findChildViewById(rootView, id);
      if (ivTaskApp == null) {
        break missingId;
      }

      id = R.id.iv_task_call;
      AppCompatImageView ivTaskCall = ViewBindings.findChildViewById(rootView, id);
      if (ivTaskCall == null) {
        break missingId;
      }

      id = R.id.iv_task_sms;
      AppCompatImageView ivTaskSms = ViewBindings.findChildViewById(rootView, id);
      if (ivTaskSms == null) {
        break missingId;
      }

      id = R.id.layout_app_list;
      LinearLayout layoutAppList = ViewBindings.findChildViewById(rootView, id);
      if (layoutAppList == null) {
        break missingId;
      }

      id = R.id.layout_match_type;
      LinearLayout layoutMatchType = ViewBindings.findChildViewById(rootView, id);
      if (layoutMatchType == null) {
        break missingId;
      }

      id = R.id.layout_match_value;
      LinearLayout layoutMatchValue = ViewBindings.findChildViewById(rootView, id);
      if (layoutMatchValue == null) {
        break missingId;
      }

      id = R.id.layout_sim_slot;
      LinearLayout layoutSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (layoutSimSlot == null) {
        break missingId;
      }

      id = R.id.rb_call_type;
      RadioButton rbCallType = ViewBindings.findChildViewById(rootView, id);
      if (rbCallType == null) {
        break missingId;
      }

      id = R.id.rb_contain;
      RadioButton rbContain = ViewBindings.findChildViewById(rootView, id);
      if (rbContain == null) {
        break missingId;
      }

      id = R.id.rb_content;
      RadioButton rbContent = ViewBindings.findChildViewById(rootView, id);
      if (rbContent == null) {
        break missingId;
      }

      id = R.id.rb_end_with;
      RadioButton rbEndWith = ViewBindings.findChildViewById(rootView, id);
      if (rbEndWith == null) {
        break missingId;
      }

      id = R.id.rb_inform_content;
      RadioButton rbInformContent = ViewBindings.findChildViewById(rootView, id);
      if (rbInformContent == null) {
        break missingId;
      }

      id = R.id.rb_is;
      RadioButton rbIs = ViewBindings.findChildViewById(rootView, id);
      if (rbIs == null) {
        break missingId;
      }

      id = R.id.rb_multi_match;
      RadioButton rbMultiMatch = ViewBindings.findChildViewById(rootView, id);
      if (rbMultiMatch == null) {
        break missingId;
      }

      id = R.id.rb_not_contain;
      RadioButton rbNotContain = ViewBindings.findChildViewById(rootView, id);
      if (rbNotContain == null) {
        break missingId;
      }

      id = R.id.rb_package_name;
      RadioButton rbPackageName = ViewBindings.findChildViewById(rootView, id);
      if (rbPackageName == null) {
        break missingId;
      }

      id = R.id.rb_phone;
      RadioButton rbPhone = ViewBindings.findChildViewById(rootView, id);
      if (rbPhone == null) {
        break missingId;
      }

      id = R.id.rb_regex;
      RadioButton rbRegex = ViewBindings.findChildViewById(rootView, id);
      if (rbRegex == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_1;
      RadioButton rbSimSlot1 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot1 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_2;
      RadioButton rbSimSlot2 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot2 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_all;
      RadioButton rbSimSlotAll = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlotAll == null) {
        break missingId;
      }

      id = R.id.rb_start_with;
      RadioButton rbStartWith = ViewBindings.findChildViewById(rootView, id);
      if (rbStartWith == null) {
        break missingId;
      }

      id = R.id.rb_transpond_all;
      RadioButton rbTranspondAll = ViewBindings.findChildViewById(rootView, id);
      if (rbTranspondAll == null) {
        break missingId;
      }

      id = R.id.rb_uid;
      RadioButton rbUid = ViewBindings.findChildViewById(rootView, id);
      if (rbUid == null) {
        break missingId;
      }

      id = R.id.rg_check;
      RadioGroup rgCheck = ViewBindings.findChildViewById(rootView, id);
      if (rgCheck == null) {
        break missingId;
      }

      id = R.id.rg_check2;
      RadioGroup rgCheck2 = ViewBindings.findChildViewById(rootView, id);
      if (rgCheck2 == null) {
        break missingId;
      }

      id = R.id.rg_filed;
      RadioGroup rgFiled = ViewBindings.findChildViewById(rootView, id);
      if (rgFiled == null) {
        break missingId;
      }

      id = R.id.rg_sim_slot;
      RadioGroup rgSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (rgSimSlot == null) {
        break missingId;
      }

      id = R.id.sp_app;
      EditSpinner spApp = ViewBindings.findChildViewById(rootView, id);
      if (spApp == null) {
        break missingId;
      }

      id = R.id.sp_call_type;
      MaterialSpinner spCallType = ViewBindings.findChildViewById(rootView, id);
      if (spCallType == null) {
        break missingId;
      }

      id = R.id.tv_mu_rule_tips;
      TextView tvMuRuleTips = ViewBindings.findChildViewById(rootView, id);
      if (tvMuRuleTips == null) {
        break missingId;
      }

      return new FragmentTasksConditionMsgBinding((LinearLayout) rootView, btnDel, btnSave, btnTest,
          etValue, ivTaskApp, ivTaskCall, ivTaskSms, layoutAppList, layoutMatchType,
          layoutMatchValue, layoutSimSlot, rbCallType, rbContain, rbContent, rbEndWith,
          rbInformContent, rbIs, rbMultiMatch, rbNotContain, rbPackageName, rbPhone, rbRegex,
          rbSimSlot1, rbSimSlot2, rbSimSlotAll, rbStartWith, rbTranspondAll, rbUid, rgCheck,
          rgCheck2, rgFiled, rgSimSlot, spApp, spCallType, tvMuRuleTips);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
