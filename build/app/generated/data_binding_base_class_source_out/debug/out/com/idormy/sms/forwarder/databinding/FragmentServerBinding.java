// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.SmoothCheckBox;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.ClearEditText;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.picker.XSeekBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentServerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RippleShadowShadowButton btnCopyPublicKey;

  @NonNull
  public final RippleShadowShadowButton btnGenerateKey;

  @NonNull
  public final RippleShadowShadowButton btnPathPicker;

  @NonNull
  public final RippleShadowShadowButton btnSignKey;

  @NonNull
  public final RippleShadowShadowButton btnSm4Key;

  @NonNull
  public final RippleShadowShadowButton btnToggleServer;

  @NonNull
  public final MaterialEditText etPrivateKey;

  @NonNull
  public final MaterialEditText etPublicKey;

  @NonNull
  public final MaterialEditText etSignKey;

  @NonNull
  public final MaterialEditText etSm4Key;

  @NonNull
  public final ClearEditText etWebPath;

  @NonNull
  public final RippleShadowShadowButton ivCopy;

  @NonNull
  public final LinearLayout layoutPrivateKey;

  @NonNull
  public final LinearLayout layoutPublicKey;

  @NonNull
  public final LinearLayout layoutSignKey;

  @NonNull
  public final LinearLayout layoutSm4Key;

  @NonNull
  public final LinearLayout layoutTimeTolerance;

  @NonNull
  public final RadioButton rbSafetyMeasuresNone;

  @NonNull
  public final RadioButton rbSafetyMeasuresRsa;

  @NonNull
  public final RadioButton rbSafetyMeasuresSign;

  @NonNull
  public final RadioButton rbSafetyMeasuresSm4;

  @NonNull
  public final RadioGroup rgSafetyMeasures;

  @NonNull
  public final SwitchButton sbApiAddContacts;

  @NonNull
  public final SwitchButton sbApiClone;

  @NonNull
  public final SwitchButton sbApiLocation;

  @NonNull
  public final SwitchButton sbApiQueryBattery;

  @NonNull
  public final SwitchButton sbApiQueryCall;

  @NonNull
  public final SwitchButton sbApiQueryContacts;

  @NonNull
  public final SwitchButton sbApiQuerySms;

  @NonNull
  public final SwitchButton sbApiSendSms;

  @NonNull
  public final SwitchButton sbApiWol;

  @NonNull
  public final SmoothCheckBox scbServerAutorun;

  @NonNull
  public final TextView tvServerTips;

  @NonNull
  public final XSeekBar xsbTimeTolerance;

  private FragmentServerBinding(@NonNull LinearLayout rootView,
      @NonNull RippleShadowShadowButton btnCopyPublicKey,
      @NonNull RippleShadowShadowButton btnGenerateKey,
      @NonNull RippleShadowShadowButton btnPathPicker, @NonNull RippleShadowShadowButton btnSignKey,
      @NonNull RippleShadowShadowButton btnSm4Key,
      @NonNull RippleShadowShadowButton btnToggleServer, @NonNull MaterialEditText etPrivateKey,
      @NonNull MaterialEditText etPublicKey, @NonNull MaterialEditText etSignKey,
      @NonNull MaterialEditText etSm4Key, @NonNull ClearEditText etWebPath,
      @NonNull RippleShadowShadowButton ivCopy, @NonNull LinearLayout layoutPrivateKey,
      @NonNull LinearLayout layoutPublicKey, @NonNull LinearLayout layoutSignKey,
      @NonNull LinearLayout layoutSm4Key, @NonNull LinearLayout layoutTimeTolerance,
      @NonNull RadioButton rbSafetyMeasuresNone, @NonNull RadioButton rbSafetyMeasuresRsa,
      @NonNull RadioButton rbSafetyMeasuresSign, @NonNull RadioButton rbSafetyMeasuresSm4,
      @NonNull RadioGroup rgSafetyMeasures, @NonNull SwitchButton sbApiAddContacts,
      @NonNull SwitchButton sbApiClone, @NonNull SwitchButton sbApiLocation,
      @NonNull SwitchButton sbApiQueryBattery, @NonNull SwitchButton sbApiQueryCall,
      @NonNull SwitchButton sbApiQueryContacts, @NonNull SwitchButton sbApiQuerySms,
      @NonNull SwitchButton sbApiSendSms, @NonNull SwitchButton sbApiWol,
      @NonNull SmoothCheckBox scbServerAutorun, @NonNull TextView tvServerTips,
      @NonNull XSeekBar xsbTimeTolerance) {
    this.rootView = rootView;
    this.btnCopyPublicKey = btnCopyPublicKey;
    this.btnGenerateKey = btnGenerateKey;
    this.btnPathPicker = btnPathPicker;
    this.btnSignKey = btnSignKey;
    this.btnSm4Key = btnSm4Key;
    this.btnToggleServer = btnToggleServer;
    this.etPrivateKey = etPrivateKey;
    this.etPublicKey = etPublicKey;
    this.etSignKey = etSignKey;
    this.etSm4Key = etSm4Key;
    this.etWebPath = etWebPath;
    this.ivCopy = ivCopy;
    this.layoutPrivateKey = layoutPrivateKey;
    this.layoutPublicKey = layoutPublicKey;
    this.layoutSignKey = layoutSignKey;
    this.layoutSm4Key = layoutSm4Key;
    this.layoutTimeTolerance = layoutTimeTolerance;
    this.rbSafetyMeasuresNone = rbSafetyMeasuresNone;
    this.rbSafetyMeasuresRsa = rbSafetyMeasuresRsa;
    this.rbSafetyMeasuresSign = rbSafetyMeasuresSign;
    this.rbSafetyMeasuresSm4 = rbSafetyMeasuresSm4;
    this.rgSafetyMeasures = rgSafetyMeasures;
    this.sbApiAddContacts = sbApiAddContacts;
    this.sbApiClone = sbApiClone;
    this.sbApiLocation = sbApiLocation;
    this.sbApiQueryBattery = sbApiQueryBattery;
    this.sbApiQueryCall = sbApiQueryCall;
    this.sbApiQueryContacts = sbApiQueryContacts;
    this.sbApiQuerySms = sbApiQuerySms;
    this.sbApiSendSms = sbApiSendSms;
    this.sbApiWol = sbApiWol;
    this.scbServerAutorun = scbServerAutorun;
    this.tvServerTips = tvServerTips;
    this.xsbTimeTolerance = xsbTimeTolerance;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentServerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentServerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_server, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentServerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_copy_public_key;
      RippleShadowShadowButton btnCopyPublicKey = ViewBindings.findChildViewById(rootView, id);
      if (btnCopyPublicKey == null) {
        break missingId;
      }

      id = R.id.btn_generate_key;
      RippleShadowShadowButton btnGenerateKey = ViewBindings.findChildViewById(rootView, id);
      if (btnGenerateKey == null) {
        break missingId;
      }

      id = R.id.btn_path_picker;
      RippleShadowShadowButton btnPathPicker = ViewBindings.findChildViewById(rootView, id);
      if (btnPathPicker == null) {
        break missingId;
      }

      id = R.id.btn_sign_key;
      RippleShadowShadowButton btnSignKey = ViewBindings.findChildViewById(rootView, id);
      if (btnSignKey == null) {
        break missingId;
      }

      id = R.id.btn_sm4_key;
      RippleShadowShadowButton btnSm4Key = ViewBindings.findChildViewById(rootView, id);
      if (btnSm4Key == null) {
        break missingId;
      }

      id = R.id.btn_toggle_server;
      RippleShadowShadowButton btnToggleServer = ViewBindings.findChildViewById(rootView, id);
      if (btnToggleServer == null) {
        break missingId;
      }

      id = R.id.et_private_key;
      MaterialEditText etPrivateKey = ViewBindings.findChildViewById(rootView, id);
      if (etPrivateKey == null) {
        break missingId;
      }

      id = R.id.et_public_key;
      MaterialEditText etPublicKey = ViewBindings.findChildViewById(rootView, id);
      if (etPublicKey == null) {
        break missingId;
      }

      id = R.id.et_sign_key;
      MaterialEditText etSignKey = ViewBindings.findChildViewById(rootView, id);
      if (etSignKey == null) {
        break missingId;
      }

      id = R.id.et_sm4_key;
      MaterialEditText etSm4Key = ViewBindings.findChildViewById(rootView, id);
      if (etSm4Key == null) {
        break missingId;
      }

      id = R.id.et_web_path;
      ClearEditText etWebPath = ViewBindings.findChildViewById(rootView, id);
      if (etWebPath == null) {
        break missingId;
      }

      id = R.id.iv_copy;
      RippleShadowShadowButton ivCopy = ViewBindings.findChildViewById(rootView, id);
      if (ivCopy == null) {
        break missingId;
      }

      id = R.id.layout_private_key;
      LinearLayout layoutPrivateKey = ViewBindings.findChildViewById(rootView, id);
      if (layoutPrivateKey == null) {
        break missingId;
      }

      id = R.id.layout_public_key;
      LinearLayout layoutPublicKey = ViewBindings.findChildViewById(rootView, id);
      if (layoutPublicKey == null) {
        break missingId;
      }

      id = R.id.layout_sign_key;
      LinearLayout layoutSignKey = ViewBindings.findChildViewById(rootView, id);
      if (layoutSignKey == null) {
        break missingId;
      }

      id = R.id.layout_sm4_key;
      LinearLayout layoutSm4Key = ViewBindings.findChildViewById(rootView, id);
      if (layoutSm4Key == null) {
        break missingId;
      }

      id = R.id.layout_time_tolerance;
      LinearLayout layoutTimeTolerance = ViewBindings.findChildViewById(rootView, id);
      if (layoutTimeTolerance == null) {
        break missingId;
      }

      id = R.id.rb_safety_measures_none;
      RadioButton rbSafetyMeasuresNone = ViewBindings.findChildViewById(rootView, id);
      if (rbSafetyMeasuresNone == null) {
        break missingId;
      }

      id = R.id.rb_safety_measures_rsa;
      RadioButton rbSafetyMeasuresRsa = ViewBindings.findChildViewById(rootView, id);
      if (rbSafetyMeasuresRsa == null) {
        break missingId;
      }

      id = R.id.rb_safety_measures_sign;
      RadioButton rbSafetyMeasuresSign = ViewBindings.findChildViewById(rootView, id);
      if (rbSafetyMeasuresSign == null) {
        break missingId;
      }

      id = R.id.rb_safety_measures_sm4;
      RadioButton rbSafetyMeasuresSm4 = ViewBindings.findChildViewById(rootView, id);
      if (rbSafetyMeasuresSm4 == null) {
        break missingId;
      }

      id = R.id.rg_safety_measures;
      RadioGroup rgSafetyMeasures = ViewBindings.findChildViewById(rootView, id);
      if (rgSafetyMeasures == null) {
        break missingId;
      }

      id = R.id.sb_api_add_contacts;
      SwitchButton sbApiAddContacts = ViewBindings.findChildViewById(rootView, id);
      if (sbApiAddContacts == null) {
        break missingId;
      }

      id = R.id.sb_api_clone;
      SwitchButton sbApiClone = ViewBindings.findChildViewById(rootView, id);
      if (sbApiClone == null) {
        break missingId;
      }

      id = R.id.sb_api_location;
      SwitchButton sbApiLocation = ViewBindings.findChildViewById(rootView, id);
      if (sbApiLocation == null) {
        break missingId;
      }

      id = R.id.sb_api_query_battery;
      SwitchButton sbApiQueryBattery = ViewBindings.findChildViewById(rootView, id);
      if (sbApiQueryBattery == null) {
        break missingId;
      }

      id = R.id.sb_api_query_call;
      SwitchButton sbApiQueryCall = ViewBindings.findChildViewById(rootView, id);
      if (sbApiQueryCall == null) {
        break missingId;
      }

      id = R.id.sb_api_query_contacts;
      SwitchButton sbApiQueryContacts = ViewBindings.findChildViewById(rootView, id);
      if (sbApiQueryContacts == null) {
        break missingId;
      }

      id = R.id.sb_api_query_sms;
      SwitchButton sbApiQuerySms = ViewBindings.findChildViewById(rootView, id);
      if (sbApiQuerySms == null) {
        break missingId;
      }

      id = R.id.sb_api_send_sms;
      SwitchButton sbApiSendSms = ViewBindings.findChildViewById(rootView, id);
      if (sbApiSendSms == null) {
        break missingId;
      }

      id = R.id.sb_api_wol;
      SwitchButton sbApiWol = ViewBindings.findChildViewById(rootView, id);
      if (sbApiWol == null) {
        break missingId;
      }

      id = R.id.scb_server_autorun;
      SmoothCheckBox scbServerAutorun = ViewBindings.findChildViewById(rootView, id);
      if (scbServerAutorun == null) {
        break missingId;
      }

      id = R.id.tv_server_tips;
      TextView tvServerTips = ViewBindings.findChildViewById(rootView, id);
      if (tvServerTips == null) {
        break missingId;
      }

      id = R.id.xsb_time_tolerance;
      XSeekBar xsbTimeTolerance = ViewBindings.findChildViewById(rootView, id);
      if (xsbTimeTolerance == null) {
        break missingId;
      }

      return new FragmentServerBinding((LinearLayout) rootView, btnCopyPublicKey, btnGenerateKey,
          btnPathPicker, btnSignKey, btnSm4Key, btnToggleServer, etPrivateKey, etPublicKey,
          etSignKey, etSm4Key, etWebPath, ivCopy, layoutPrivateKey, layoutPublicKey, layoutSignKey,
          layoutSm4Key, layoutTimeTolerance, rbSafetyMeasuresNone, rbSafetyMeasuresRsa,
          rbSafetyMeasuresSign, rbSafetyMeasuresSm4, rgSafetyMeasures, sbApiAddContacts, sbApiClone,
          sbApiLocation, sbApiQueryBattery, sbApiQueryCall, sbApiQueryContacts, sbApiQuerySms,
          sbApiSendSms, sbApiWol, scbServerAutorun, tvServerTips, xsbTimeTolerance);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
