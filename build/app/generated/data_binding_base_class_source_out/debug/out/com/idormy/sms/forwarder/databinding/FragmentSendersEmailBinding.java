// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.materialspinner.MaterialSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSendersEmailBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView btnAddRecipient;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final RippleShadowShadowButton btnSenderKeystorePicker;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etFromEmail;

  @NonNull
  public final MaterialEditText etHost;

  @NonNull
  public final MaterialEditText etName;

  @NonNull
  public final MaterialEditText etNickname;

  @NonNull
  public final MaterialEditText etPort;

  @NonNull
  public final MaterialEditText etPwd;

  @NonNull
  public final MaterialEditText etSenderKeystore;

  @NonNull
  public final MaterialEditText etSenderPassword;

  @NonNull
  public final MaterialEditText etTitleTemplate;

  @NonNull
  public final GridLayout glNickname;

  @NonNull
  public final GridLayout glTitleTemplate;

  @NonNull
  public final LinearLayout layoutRecipients;

  @NonNull
  public final LinearLayout layoutSenderKeystore;

  @NonNull
  public final LinearLayout layoutServiceSetting;

  @NonNull
  public final LinearLayout layoutSmsTemplate;

  @NonNull
  public final LinearLayout layoutSmsTemplateToNickname;

  @NonNull
  public final RadioButton rbEncryptionProtocolOpenpgp;

  @NonNull
  public final RadioButton rbEncryptionProtocolPlain;

  @NonNull
  public final RadioButton rbEncryptionProtocolSmime;

  @NonNull
  public final RadioGroup rgEncryptionProtocol;

  @NonNull
  public final SwitchButton sbEnable;

  @NonNull
  public final SwitchButton sbSsl;

  @NonNull
  public final SwitchButton sbStartTls;

  @NonNull
  public final MaterialSpinner spMailType;

  @NonNull
  public final TextView tvEmailTo;

  @NonNull
  public final TextView tvEmailToTips;

  @NonNull
  public final TextView tvSenderKeystore;

  private FragmentSendersEmailBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView btnAddRecipient, @NonNull SuperButton btnDel, @NonNull SuperButton btnSave,
      @NonNull RippleShadowShadowButton btnSenderKeystorePicker, @NonNull SuperButton btnTest,
      @NonNull MaterialEditText etFromEmail, @NonNull MaterialEditText etHost,
      @NonNull MaterialEditText etName, @NonNull MaterialEditText etNickname,
      @NonNull MaterialEditText etPort, @NonNull MaterialEditText etPwd,
      @NonNull MaterialEditText etSenderKeystore, @NonNull MaterialEditText etSenderPassword,
      @NonNull MaterialEditText etTitleTemplate, @NonNull GridLayout glNickname,
      @NonNull GridLayout glTitleTemplate, @NonNull LinearLayout layoutRecipients,
      @NonNull LinearLayout layoutSenderKeystore, @NonNull LinearLayout layoutServiceSetting,
      @NonNull LinearLayout layoutSmsTemplate, @NonNull LinearLayout layoutSmsTemplateToNickname,
      @NonNull RadioButton rbEncryptionProtocolOpenpgp,
      @NonNull RadioButton rbEncryptionProtocolPlain,
      @NonNull RadioButton rbEncryptionProtocolSmime, @NonNull RadioGroup rgEncryptionProtocol,
      @NonNull SwitchButton sbEnable, @NonNull SwitchButton sbSsl, @NonNull SwitchButton sbStartTls,
      @NonNull MaterialSpinner spMailType, @NonNull TextView tvEmailTo,
      @NonNull TextView tvEmailToTips, @NonNull TextView tvSenderKeystore) {
    this.rootView = rootView;
    this.btnAddRecipient = btnAddRecipient;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnSenderKeystorePicker = btnSenderKeystorePicker;
    this.btnTest = btnTest;
    this.etFromEmail = etFromEmail;
    this.etHost = etHost;
    this.etName = etName;
    this.etNickname = etNickname;
    this.etPort = etPort;
    this.etPwd = etPwd;
    this.etSenderKeystore = etSenderKeystore;
    this.etSenderPassword = etSenderPassword;
    this.etTitleTemplate = etTitleTemplate;
    this.glNickname = glNickname;
    this.glTitleTemplate = glTitleTemplate;
    this.layoutRecipients = layoutRecipients;
    this.layoutSenderKeystore = layoutSenderKeystore;
    this.layoutServiceSetting = layoutServiceSetting;
    this.layoutSmsTemplate = layoutSmsTemplate;
    this.layoutSmsTemplateToNickname = layoutSmsTemplateToNickname;
    this.rbEncryptionProtocolOpenpgp = rbEncryptionProtocolOpenpgp;
    this.rbEncryptionProtocolPlain = rbEncryptionProtocolPlain;
    this.rbEncryptionProtocolSmime = rbEncryptionProtocolSmime;
    this.rgEncryptionProtocol = rgEncryptionProtocol;
    this.sbEnable = sbEnable;
    this.sbSsl = sbSsl;
    this.sbStartTls = sbStartTls;
    this.spMailType = spMailType;
    this.tvEmailTo = tvEmailTo;
    this.tvEmailToTips = tvEmailToTips;
    this.tvSenderKeystore = tvSenderKeystore;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSendersEmailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSendersEmailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_senders_email, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSendersEmailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_add_recipient;
      ImageView btnAddRecipient = ViewBindings.findChildViewById(rootView, id);
      if (btnAddRecipient == null) {
        break missingId;
      }

      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_sender_keystore_picker;
      RippleShadowShadowButton btnSenderKeystorePicker = ViewBindings.findChildViewById(rootView, id);
      if (btnSenderKeystorePicker == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_from_email;
      MaterialEditText etFromEmail = ViewBindings.findChildViewById(rootView, id);
      if (etFromEmail == null) {
        break missingId;
      }

      id = R.id.et_host;
      MaterialEditText etHost = ViewBindings.findChildViewById(rootView, id);
      if (etHost == null) {
        break missingId;
      }

      id = R.id.et_name;
      MaterialEditText etName = ViewBindings.findChildViewById(rootView, id);
      if (etName == null) {
        break missingId;
      }

      id = R.id.et_nickname;
      MaterialEditText etNickname = ViewBindings.findChildViewById(rootView, id);
      if (etNickname == null) {
        break missingId;
      }

      id = R.id.et_port;
      MaterialEditText etPort = ViewBindings.findChildViewById(rootView, id);
      if (etPort == null) {
        break missingId;
      }

      id = R.id.et_pwd;
      MaterialEditText etPwd = ViewBindings.findChildViewById(rootView, id);
      if (etPwd == null) {
        break missingId;
      }

      id = R.id.et_sender_keystore;
      MaterialEditText etSenderKeystore = ViewBindings.findChildViewById(rootView, id);
      if (etSenderKeystore == null) {
        break missingId;
      }

      id = R.id.et_sender_password;
      MaterialEditText etSenderPassword = ViewBindings.findChildViewById(rootView, id);
      if (etSenderPassword == null) {
        break missingId;
      }

      id = R.id.et_title_template;
      MaterialEditText etTitleTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etTitleTemplate == null) {
        break missingId;
      }

      id = R.id.gl_nickname;
      GridLayout glNickname = ViewBindings.findChildViewById(rootView, id);
      if (glNickname == null) {
        break missingId;
      }

      id = R.id.gl_title_template;
      GridLayout glTitleTemplate = ViewBindings.findChildViewById(rootView, id);
      if (glTitleTemplate == null) {
        break missingId;
      }

      id = R.id.layout_recipients;
      LinearLayout layoutRecipients = ViewBindings.findChildViewById(rootView, id);
      if (layoutRecipients == null) {
        break missingId;
      }

      id = R.id.layout_sender_keystore;
      LinearLayout layoutSenderKeystore = ViewBindings.findChildViewById(rootView, id);
      if (layoutSenderKeystore == null) {
        break missingId;
      }

      id = R.id.layoutServiceSetting;
      LinearLayout layoutServiceSetting = ViewBindings.findChildViewById(rootView, id);
      if (layoutServiceSetting == null) {
        break missingId;
      }

      id = R.id.layout_sms_template;
      LinearLayout layoutSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (layoutSmsTemplate == null) {
        break missingId;
      }

      id = R.id.layout_sms_template_to_nickname;
      LinearLayout layoutSmsTemplateToNickname = ViewBindings.findChildViewById(rootView, id);
      if (layoutSmsTemplateToNickname == null) {
        break missingId;
      }

      id = R.id.rb_encryption_protocol_openpgp;
      RadioButton rbEncryptionProtocolOpenpgp = ViewBindings.findChildViewById(rootView, id);
      if (rbEncryptionProtocolOpenpgp == null) {
        break missingId;
      }

      id = R.id.rb_encryption_protocol_plain;
      RadioButton rbEncryptionProtocolPlain = ViewBindings.findChildViewById(rootView, id);
      if (rbEncryptionProtocolPlain == null) {
        break missingId;
      }

      id = R.id.rb_encryption_protocol_smime;
      RadioButton rbEncryptionProtocolSmime = ViewBindings.findChildViewById(rootView, id);
      if (rbEncryptionProtocolSmime == null) {
        break missingId;
      }

      id = R.id.rg_encryption_protocol;
      RadioGroup rgEncryptionProtocol = ViewBindings.findChildViewById(rootView, id);
      if (rgEncryptionProtocol == null) {
        break missingId;
      }

      id = R.id.sb_enable;
      SwitchButton sbEnable = ViewBindings.findChildViewById(rootView, id);
      if (sbEnable == null) {
        break missingId;
      }

      id = R.id.sb_ssl;
      SwitchButton sbSsl = ViewBindings.findChildViewById(rootView, id);
      if (sbSsl == null) {
        break missingId;
      }

      id = R.id.sb_startTls;
      SwitchButton sbStartTls = ViewBindings.findChildViewById(rootView, id);
      if (sbStartTls == null) {
        break missingId;
      }

      id = R.id.sp_mail_type;
      MaterialSpinner spMailType = ViewBindings.findChildViewById(rootView, id);
      if (spMailType == null) {
        break missingId;
      }

      id = R.id.tv_email_to;
      TextView tvEmailTo = ViewBindings.findChildViewById(rootView, id);
      if (tvEmailTo == null) {
        break missingId;
      }

      id = R.id.tv_email_to_tips;
      TextView tvEmailToTips = ViewBindings.findChildViewById(rootView, id);
      if (tvEmailToTips == null) {
        break missingId;
      }

      id = R.id.tv_sender_keystore;
      TextView tvSenderKeystore = ViewBindings.findChildViewById(rootView, id);
      if (tvSenderKeystore == null) {
        break missingId;
      }

      return new FragmentSendersEmailBinding((LinearLayout) rootView, btnAddRecipient, btnDel,
          btnSave, btnSenderKeystorePicker, btnTest, etFromEmail, etHost, etName, etNickname,
          etPort, etPwd, etSenderKeystore, etSenderPassword, etTitleTemplate, glNickname,
          glTitleTemplate, layoutRecipients, layoutSenderKeystore, layoutServiceSetting,
          layoutSmsTemplate, layoutSmsTemplateToNickname, rbEncryptionProtocolOpenpgp,
          rbEncryptionProtocolPlain, rbEncryptionProtocolSmime, rgEncryptionProtocol, sbEnable,
          sbSsl, sbStartTls, spMailType, tvEmailTo, tvEmailToTips, tvSenderKeystore);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
