// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.SmoothCheckBox;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.editspinner.EditSpinner;
import com.xuexiang.xui.widget.spinner.materialspinner.MaterialSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRulesEditBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final RippleShadowShadowButton btnSilentPeriod;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etRegexReplace;

  @NonNull
  public final MaterialEditText etSmsTemplate;

  @NonNull
  public final MaterialEditText etValue;

  @NonNull
  public final SmoothCheckBox fri;

  @NonNull
  public final GridLayout glSmsTemplate;

  @NonNull
  public final LinearLayout layoutAppList;

  @NonNull
  public final LinearLayout layoutMatchType;

  @NonNull
  public final LinearLayout layoutMatchValue;

  @NonNull
  public final LinearLayout layoutRegexReplace;

  @NonNull
  public final LinearLayout layoutSenderLogic;

  @NonNull
  public final LinearLayout layoutSilentPeriod;

  @NonNull
  public final LinearLayout layoutSimSlot;

  @NonNull
  public final LinearLayout layoutSmsTemplate;

  @NonNull
  public final SmoothCheckBox mon;

  @NonNull
  public final RadioButton rbCallType;

  @NonNull
  public final RadioButton rbContain;

  @NonNull
  public final RadioButton rbContent;

  @NonNull
  public final RadioButton rbEndWith;

  @NonNull
  public final RadioButton rbInformContent;

  @NonNull
  public final RadioButton rbIs;

  @NonNull
  public final RadioButton rbMultiMatch;

  @NonNull
  public final RadioButton rbNotContain;

  @NonNull
  public final RadioButton rbPackageName;

  @NonNull
  public final RadioButton rbPhone;

  @NonNull
  public final RadioButton rbRegex;

  @NonNull
  public final RadioButton rbSenderLogicAll;

  @NonNull
  public final RadioButton rbSenderLogicUntilFail;

  @NonNull
  public final RadioButton rbSenderLogicUntilSuccess;

  @NonNull
  public final RadioButton rbSimSlot1;

  @NonNull
  public final RadioButton rbSimSlot2;

  @NonNull
  public final RadioButton rbSimSlotAll;

  @NonNull
  public final RadioButton rbStartWith;

  @NonNull
  public final RadioButton rbTranspondAll;

  @NonNull
  public final RadioButton rbUid;

  @NonNull
  public final RecyclerView recyclerSenders;

  @NonNull
  public final RadioGroup rgCheck;

  @NonNull
  public final RadioGroup rgCheck2;

  @NonNull
  public final RadioGroup rgFiled;

  @NonNull
  public final RadioGroup rgSenderLogic;

  @NonNull
  public final RadioGroup rgSimSlot;

  @NonNull
  public final SmoothCheckBox sat;

  @NonNull
  public final SwitchButton sbRegexReplace;

  @NonNull
  public final SwitchButton sbSmsTemplate;

  @NonNull
  public final SwitchButton sbStatus;

  @NonNull
  public final EditSpinner spApp;

  @NonNull
  public final MaterialSpinner spCallType;

  @NonNull
  public final EditSpinner spSender;

  @NonNull
  public final SmoothCheckBox sun;

  @NonNull
  public final SmoothCheckBox thu;

  @NonNull
  public final SmoothCheckBox tue;

  @NonNull
  public final TextView tvMuRuleTips;

  @NonNull
  public final TextView tvSilentPeriod;

  @NonNull
  public final SmoothCheckBox wed;

  private FragmentRulesEditBinding(@NonNull LinearLayout rootView, @NonNull SuperButton btnDel,
      @NonNull SuperButton btnSave, @NonNull RippleShadowShadowButton btnSilentPeriod,
      @NonNull SuperButton btnTest, @NonNull MaterialEditText etRegexReplace,
      @NonNull MaterialEditText etSmsTemplate, @NonNull MaterialEditText etValue,
      @NonNull SmoothCheckBox fri, @NonNull GridLayout glSmsTemplate,
      @NonNull LinearLayout layoutAppList, @NonNull LinearLayout layoutMatchType,
      @NonNull LinearLayout layoutMatchValue, @NonNull LinearLayout layoutRegexReplace,
      @NonNull LinearLayout layoutSenderLogic, @NonNull LinearLayout layoutSilentPeriod,
      @NonNull LinearLayout layoutSimSlot, @NonNull LinearLayout layoutSmsTemplate,
      @NonNull SmoothCheckBox mon, @NonNull RadioButton rbCallType, @NonNull RadioButton rbContain,
      @NonNull RadioButton rbContent, @NonNull RadioButton rbEndWith,
      @NonNull RadioButton rbInformContent, @NonNull RadioButton rbIs,
      @NonNull RadioButton rbMultiMatch, @NonNull RadioButton rbNotContain,
      @NonNull RadioButton rbPackageName, @NonNull RadioButton rbPhone,
      @NonNull RadioButton rbRegex, @NonNull RadioButton rbSenderLogicAll,
      @NonNull RadioButton rbSenderLogicUntilFail, @NonNull RadioButton rbSenderLogicUntilSuccess,
      @NonNull RadioButton rbSimSlot1, @NonNull RadioButton rbSimSlot2,
      @NonNull RadioButton rbSimSlotAll, @NonNull RadioButton rbStartWith,
      @NonNull RadioButton rbTranspondAll, @NonNull RadioButton rbUid,
      @NonNull RecyclerView recyclerSenders, @NonNull RadioGroup rgCheck,
      @NonNull RadioGroup rgCheck2, @NonNull RadioGroup rgFiled, @NonNull RadioGroup rgSenderLogic,
      @NonNull RadioGroup rgSimSlot, @NonNull SmoothCheckBox sat,
      @NonNull SwitchButton sbRegexReplace, @NonNull SwitchButton sbSmsTemplate,
      @NonNull SwitchButton sbStatus, @NonNull EditSpinner spApp,
      @NonNull MaterialSpinner spCallType, @NonNull EditSpinner spSender,
      @NonNull SmoothCheckBox sun, @NonNull SmoothCheckBox thu, @NonNull SmoothCheckBox tue,
      @NonNull TextView tvMuRuleTips, @NonNull TextView tvSilentPeriod,
      @NonNull SmoothCheckBox wed) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnSilentPeriod = btnSilentPeriod;
    this.btnTest = btnTest;
    this.etRegexReplace = etRegexReplace;
    this.etSmsTemplate = etSmsTemplate;
    this.etValue = etValue;
    this.fri = fri;
    this.glSmsTemplate = glSmsTemplate;
    this.layoutAppList = layoutAppList;
    this.layoutMatchType = layoutMatchType;
    this.layoutMatchValue = layoutMatchValue;
    this.layoutRegexReplace = layoutRegexReplace;
    this.layoutSenderLogic = layoutSenderLogic;
    this.layoutSilentPeriod = layoutSilentPeriod;
    this.layoutSimSlot = layoutSimSlot;
    this.layoutSmsTemplate = layoutSmsTemplate;
    this.mon = mon;
    this.rbCallType = rbCallType;
    this.rbContain = rbContain;
    this.rbContent = rbContent;
    this.rbEndWith = rbEndWith;
    this.rbInformContent = rbInformContent;
    this.rbIs = rbIs;
    this.rbMultiMatch = rbMultiMatch;
    this.rbNotContain = rbNotContain;
    this.rbPackageName = rbPackageName;
    this.rbPhone = rbPhone;
    this.rbRegex = rbRegex;
    this.rbSenderLogicAll = rbSenderLogicAll;
    this.rbSenderLogicUntilFail = rbSenderLogicUntilFail;
    this.rbSenderLogicUntilSuccess = rbSenderLogicUntilSuccess;
    this.rbSimSlot1 = rbSimSlot1;
    this.rbSimSlot2 = rbSimSlot2;
    this.rbSimSlotAll = rbSimSlotAll;
    this.rbStartWith = rbStartWith;
    this.rbTranspondAll = rbTranspondAll;
    this.rbUid = rbUid;
    this.recyclerSenders = recyclerSenders;
    this.rgCheck = rgCheck;
    this.rgCheck2 = rgCheck2;
    this.rgFiled = rgFiled;
    this.rgSenderLogic = rgSenderLogic;
    this.rgSimSlot = rgSimSlot;
    this.sat = sat;
    this.sbRegexReplace = sbRegexReplace;
    this.sbSmsTemplate = sbSmsTemplate;
    this.sbStatus = sbStatus;
    this.spApp = spApp;
    this.spCallType = spCallType;
    this.spSender = spSender;
    this.sun = sun;
    this.thu = thu;
    this.tue = tue;
    this.tvMuRuleTips = tvMuRuleTips;
    this.tvSilentPeriod = tvSilentPeriod;
    this.wed = wed;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRulesEditBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRulesEditBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_rules_edit, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRulesEditBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_silent_period;
      RippleShadowShadowButton btnSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (btnSilentPeriod == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_regex_replace;
      MaterialEditText etRegexReplace = ViewBindings.findChildViewById(rootView, id);
      if (etRegexReplace == null) {
        break missingId;
      }

      id = R.id.et_sms_template;
      MaterialEditText etSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etSmsTemplate == null) {
        break missingId;
      }

      id = R.id.et_value;
      MaterialEditText etValue = ViewBindings.findChildViewById(rootView, id);
      if (etValue == null) {
        break missingId;
      }

      id = R.id.fri;
      SmoothCheckBox fri = ViewBindings.findChildViewById(rootView, id);
      if (fri == null) {
        break missingId;
      }

      id = R.id.gl_sms_template;
      GridLayout glSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (glSmsTemplate == null) {
        break missingId;
      }

      id = R.id.layout_app_list;
      LinearLayout layoutAppList = ViewBindings.findChildViewById(rootView, id);
      if (layoutAppList == null) {
        break missingId;
      }

      id = R.id.layout_match_type;
      LinearLayout layoutMatchType = ViewBindings.findChildViewById(rootView, id);
      if (layoutMatchType == null) {
        break missingId;
      }

      id = R.id.layout_match_value;
      LinearLayout layoutMatchValue = ViewBindings.findChildViewById(rootView, id);
      if (layoutMatchValue == null) {
        break missingId;
      }

      id = R.id.layout_regex_replace;
      LinearLayout layoutRegexReplace = ViewBindings.findChildViewById(rootView, id);
      if (layoutRegexReplace == null) {
        break missingId;
      }

      id = R.id.layout_sender_logic;
      LinearLayout layoutSenderLogic = ViewBindings.findChildViewById(rootView, id);
      if (layoutSenderLogic == null) {
        break missingId;
      }

      id = R.id.layout_silent_period;
      LinearLayout layoutSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (layoutSilentPeriod == null) {
        break missingId;
      }

      id = R.id.layout_sim_slot;
      LinearLayout layoutSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (layoutSimSlot == null) {
        break missingId;
      }

      id = R.id.layout_sms_template;
      LinearLayout layoutSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (layoutSmsTemplate == null) {
        break missingId;
      }

      id = R.id.mon;
      SmoothCheckBox mon = ViewBindings.findChildViewById(rootView, id);
      if (mon == null) {
        break missingId;
      }

      id = R.id.rb_call_type;
      RadioButton rbCallType = ViewBindings.findChildViewById(rootView, id);
      if (rbCallType == null) {
        break missingId;
      }

      id = R.id.rb_contain;
      RadioButton rbContain = ViewBindings.findChildViewById(rootView, id);
      if (rbContain == null) {
        break missingId;
      }

      id = R.id.rb_content;
      RadioButton rbContent = ViewBindings.findChildViewById(rootView, id);
      if (rbContent == null) {
        break missingId;
      }

      id = R.id.rb_end_with;
      RadioButton rbEndWith = ViewBindings.findChildViewById(rootView, id);
      if (rbEndWith == null) {
        break missingId;
      }

      id = R.id.rb_inform_content;
      RadioButton rbInformContent = ViewBindings.findChildViewById(rootView, id);
      if (rbInformContent == null) {
        break missingId;
      }

      id = R.id.rb_is;
      RadioButton rbIs = ViewBindings.findChildViewById(rootView, id);
      if (rbIs == null) {
        break missingId;
      }

      id = R.id.rb_multi_match;
      RadioButton rbMultiMatch = ViewBindings.findChildViewById(rootView, id);
      if (rbMultiMatch == null) {
        break missingId;
      }

      id = R.id.rb_not_contain;
      RadioButton rbNotContain = ViewBindings.findChildViewById(rootView, id);
      if (rbNotContain == null) {
        break missingId;
      }

      id = R.id.rb_package_name;
      RadioButton rbPackageName = ViewBindings.findChildViewById(rootView, id);
      if (rbPackageName == null) {
        break missingId;
      }

      id = R.id.rb_phone;
      RadioButton rbPhone = ViewBindings.findChildViewById(rootView, id);
      if (rbPhone == null) {
        break missingId;
      }

      id = R.id.rb_regex;
      RadioButton rbRegex = ViewBindings.findChildViewById(rootView, id);
      if (rbRegex == null) {
        break missingId;
      }

      id = R.id.rb_sender_logic_all;
      RadioButton rbSenderLogicAll = ViewBindings.findChildViewById(rootView, id);
      if (rbSenderLogicAll == null) {
        break missingId;
      }

      id = R.id.rb_sender_logic_until_fail;
      RadioButton rbSenderLogicUntilFail = ViewBindings.findChildViewById(rootView, id);
      if (rbSenderLogicUntilFail == null) {
        break missingId;
      }

      id = R.id.rb_sender_logic_until_success;
      RadioButton rbSenderLogicUntilSuccess = ViewBindings.findChildViewById(rootView, id);
      if (rbSenderLogicUntilSuccess == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_1;
      RadioButton rbSimSlot1 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot1 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_2;
      RadioButton rbSimSlot2 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot2 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_all;
      RadioButton rbSimSlotAll = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlotAll == null) {
        break missingId;
      }

      id = R.id.rb_start_with;
      RadioButton rbStartWith = ViewBindings.findChildViewById(rootView, id);
      if (rbStartWith == null) {
        break missingId;
      }

      id = R.id.rb_transpond_all;
      RadioButton rbTranspondAll = ViewBindings.findChildViewById(rootView, id);
      if (rbTranspondAll == null) {
        break missingId;
      }

      id = R.id.rb_uid;
      RadioButton rbUid = ViewBindings.findChildViewById(rootView, id);
      if (rbUid == null) {
        break missingId;
      }

      id = R.id.recycler_senders;
      RecyclerView recyclerSenders = ViewBindings.findChildViewById(rootView, id);
      if (recyclerSenders == null) {
        break missingId;
      }

      id = R.id.rg_check;
      RadioGroup rgCheck = ViewBindings.findChildViewById(rootView, id);
      if (rgCheck == null) {
        break missingId;
      }

      id = R.id.rg_check2;
      RadioGroup rgCheck2 = ViewBindings.findChildViewById(rootView, id);
      if (rgCheck2 == null) {
        break missingId;
      }

      id = R.id.rg_filed;
      RadioGroup rgFiled = ViewBindings.findChildViewById(rootView, id);
      if (rgFiled == null) {
        break missingId;
      }

      id = R.id.rg_sender_logic;
      RadioGroup rgSenderLogic = ViewBindings.findChildViewById(rootView, id);
      if (rgSenderLogic == null) {
        break missingId;
      }

      id = R.id.rg_sim_slot;
      RadioGroup rgSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (rgSimSlot == null) {
        break missingId;
      }

      id = R.id.sat;
      SmoothCheckBox sat = ViewBindings.findChildViewById(rootView, id);
      if (sat == null) {
        break missingId;
      }

      id = R.id.sb_regex_replace;
      SwitchButton sbRegexReplace = ViewBindings.findChildViewById(rootView, id);
      if (sbRegexReplace == null) {
        break missingId;
      }

      id = R.id.sb_sms_template;
      SwitchButton sbSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (sbSmsTemplate == null) {
        break missingId;
      }

      id = R.id.sb_status;
      SwitchButton sbStatus = ViewBindings.findChildViewById(rootView, id);
      if (sbStatus == null) {
        break missingId;
      }

      id = R.id.sp_app;
      EditSpinner spApp = ViewBindings.findChildViewById(rootView, id);
      if (spApp == null) {
        break missingId;
      }

      id = R.id.sp_call_type;
      MaterialSpinner spCallType = ViewBindings.findChildViewById(rootView, id);
      if (spCallType == null) {
        break missingId;
      }

      id = R.id.sp_sender;
      EditSpinner spSender = ViewBindings.findChildViewById(rootView, id);
      if (spSender == null) {
        break missingId;
      }

      id = R.id.sun;
      SmoothCheckBox sun = ViewBindings.findChildViewById(rootView, id);
      if (sun == null) {
        break missingId;
      }

      id = R.id.thu;
      SmoothCheckBox thu = ViewBindings.findChildViewById(rootView, id);
      if (thu == null) {
        break missingId;
      }

      id = R.id.tue;
      SmoothCheckBox tue = ViewBindings.findChildViewById(rootView, id);
      if (tue == null) {
        break missingId;
      }

      id = R.id.tv_mu_rule_tips;
      TextView tvMuRuleTips = ViewBindings.findChildViewById(rootView, id);
      if (tvMuRuleTips == null) {
        break missingId;
      }

      id = R.id.tv_silent_period;
      TextView tvSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (tvSilentPeriod == null) {
        break missingId;
      }

      id = R.id.wed;
      SmoothCheckBox wed = ViewBindings.findChildViewById(rootView, id);
      if (wed == null) {
        break missingId;
      }

      return new FragmentRulesEditBinding((LinearLayout) rootView, btnDel, btnSave, btnSilentPeriod,
          btnTest, etRegexReplace, etSmsTemplate, etValue, fri, glSmsTemplate, layoutAppList,
          layoutMatchType, layoutMatchValue, layoutRegexReplace, layoutSenderLogic,
          layoutSilentPeriod, layoutSimSlot, layoutSmsTemplate, mon, rbCallType, rbContain,
          rbContent, rbEndWith, rbInformContent, rbIs, rbMultiMatch, rbNotContain, rbPackageName,
          rbPhone, rbRegex, rbSenderLogicAll, rbSenderLogicUntilFail, rbSenderLogicUntilSuccess,
          rbSimSlot1, rbSimSlot2, rbSimSlotAll, rbStartWith, rbTranspondAll, rbUid, recyclerSenders,
          rgCheck, rgCheck2, rgFiled, rgSenderLogic, rgSimSlot, sat, sbRegexReplace, sbSmsTemplate,
          sbStatus, spApp, spCallType, spSender, sun, thu, tue, tvMuRuleTips, tvSilentPeriod, wed);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
