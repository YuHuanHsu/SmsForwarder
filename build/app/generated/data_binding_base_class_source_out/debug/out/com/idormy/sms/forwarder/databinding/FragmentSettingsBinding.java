// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.SmoothCheckBox;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.ClearEditText;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.picker.XSeekBar;
import com.xuexiang.xui.widget.spinner.editspinner.EditSpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSettingsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RippleShadowShadowButton btnExportLog;

  @NonNull
  public final RippleShadowShadowButton btnExtraDeviceMark;

  @NonNull
  public final RippleShadowShadowButton btnExtraSim1;

  @NonNull
  public final RippleShadowShadowButton btnExtraSim2;

  @NonNull
  public final RippleShadowShadowButton btnOption;

  @NonNull
  public final RippleShadowShadowButton btnSilentPeriod;

  @NonNull
  public final MaterialEditText etAppList;

  @NonNull
  public final ClearEditText etExtraDeviceMark;

  @NonNull
  public final MaterialEditText etExtraSim1;

  @NonNull
  public final MaterialEditText etExtraSim2;

  @NonNull
  public final ClearEditText etNotifyContent;

  @NonNull
  public final ClearEditText etSafePhone;

  @NonNull
  public final ClearEditText etSmsTemplate;

  @NonNull
  public final MaterialEditText etSubidSim1;

  @NonNull
  public final MaterialEditText etSubidSim2;

  @NonNull
  public final GridLayout glSmsTemplate;

  @NonNull
  public final LinearLayout layoutAppList;

  @NonNull
  public final LinearLayout layoutBatterySetting;

  @NonNull
  public final LinearLayout layoutBluetoothSetting;

  @NonNull
  public final LinearLayout layoutCactusOptional;

  @NonNull
  public final LinearLayout layoutDelayTime;

  @NonNull
  public final LinearLayout layoutExcludeFromRecents;

  @NonNull
  public final LinearLayout layoutLocationSetting;

  @NonNull
  public final LinearLayout layoutOnePixelActivity;

  @NonNull
  public final LinearLayout layoutOptionalAction;

  @NonNull
  public final LinearLayout layoutSim2;

  @NonNull
  public final LinearLayout layoutSmsTemplate;

  @NonNull
  public final LinearLayout layoutSpApp;

  @NonNull
  public final RadioButton rbAccuracyCoarse;

  @NonNull
  public final RadioButton rbAccuracyFine;

  @NonNull
  public final RadioButton rbAccuracyNoRequirement;

  @NonNull
  public final RadioButton rbMainLanguageAuto;

  @NonNull
  public final RadioButton rbMainLanguageCn;

  @NonNull
  public final RadioButton rbMainLanguageEn;

  @NonNull
  public final RadioButton rbMainLanguageTw;

  @NonNull
  public final RadioButton rbPowerRequirementHigh;

  @NonNull
  public final RadioButton rbPowerRequirementLow;

  @NonNull
  public final RadioButton rbPowerRequirementMedium;

  @NonNull
  public final RadioButton rbPowerRequirementNoRequirement;

  @NonNull
  public final RadioGroup rgAccuracy;

  @NonNull
  public final RadioGroup rgMainLanguages;

  @NonNull
  public final RadioGroup rgPowerRequirement;

  @NonNull
  public final SwitchButton sbBatterySetting;

  @NonNull
  public final SwitchButton sbDebugMode;

  @NonNull
  public final SwitchButton sbDirectlyToClient;

  @NonNull
  public final SwitchButton sbDirectlyToTask;

  @NonNull
  public final SwitchButton sbEnableAccessibilityService;

  @NonNull
  public final SwitchButton sbEnableAppNotify;

  @NonNull
  public final SwitchButton sbEnableBluetooth;

  @NonNull
  public final SwitchButton sbEnableCactus;

  @NonNull
  public final SwitchButton sbEnableLoadAppList;

  @NonNull
  public final SwitchButton sbEnableLocation;

  @NonNull
  public final SwitchButton sbEnablePhone;

  @NonNull
  public final SwitchButton sbEnableSms;

  @NonNull
  public final SwitchButton sbEnableSmsCommand;

  @NonNull
  public final SwitchButton sbExcludeFromRecents;

  @NonNull
  public final SwitchButton sbSmsTemplate;

  @NonNull
  public final SwitchButton sbWithReboot;

  @NonNull
  public final SmoothCheckBox scbCallType1;

  @NonNull
  public final SmoothCheckBox scbCallType2;

  @NonNull
  public final SmoothCheckBox scbCallType3;

  @NonNull
  public final SmoothCheckBox scbCallType4;

  @NonNull
  public final SmoothCheckBox scbCallType5;

  @NonNull
  public final SmoothCheckBox scbCallType6;

  @NonNull
  public final SmoothCheckBox scbCancelAppNotify;

  @NonNull
  public final SmoothCheckBox scbIgnoreAnonymous;

  @NonNull
  public final SmoothCheckBox scbLoadSystemApp;

  @NonNull
  public final SmoothCheckBox scbLoadUserApp;

  @NonNull
  public final SmoothCheckBox scbNotUserPresent;

  @NonNull
  public final SmoothCheckBox scbOnePixelActivity;

  @NonNull
  public final SmoothCheckBox scbPlaySilenceMusic;

  @NonNull
  public final SmoothCheckBox scbSilentPeriodLogs;

  @NonNull
  public final EditSpinner spApp;

  @NonNull
  public final TextView tvAutoStartup;

  @NonNull
  public final TextView tvSilentPeriod;

  @NonNull
  public final XSeekBar xsbDelayTime;

  @NonNull
  public final XSeekBar xsbDuplicateMessagesLimits;

  @NonNull
  public final XSeekBar xsbMinDistance;

  @NonNull
  public final XSeekBar xsbMinInterval;

  @NonNull
  public final XSeekBar xsbRetryTimes;

  @NonNull
  public final XSeekBar xsbScanInterval;

  @NonNull
  public final XSeekBar xsbTimeout;

  private FragmentSettingsBinding(@NonNull LinearLayout rootView,
      @NonNull RippleShadowShadowButton btnExportLog,
      @NonNull RippleShadowShadowButton btnExtraDeviceMark,
      @NonNull RippleShadowShadowButton btnExtraSim1,
      @NonNull RippleShadowShadowButton btnExtraSim2, @NonNull RippleShadowShadowButton btnOption,
      @NonNull RippleShadowShadowButton btnSilentPeriod, @NonNull MaterialEditText etAppList,
      @NonNull ClearEditText etExtraDeviceMark, @NonNull MaterialEditText etExtraSim1,
      @NonNull MaterialEditText etExtraSim2, @NonNull ClearEditText etNotifyContent,
      @NonNull ClearEditText etSafePhone, @NonNull ClearEditText etSmsTemplate,
      @NonNull MaterialEditText etSubidSim1, @NonNull MaterialEditText etSubidSim2,
      @NonNull GridLayout glSmsTemplate, @NonNull LinearLayout layoutAppList,
      @NonNull LinearLayout layoutBatterySetting, @NonNull LinearLayout layoutBluetoothSetting,
      @NonNull LinearLayout layoutCactusOptional, @NonNull LinearLayout layoutDelayTime,
      @NonNull LinearLayout layoutExcludeFromRecents, @NonNull LinearLayout layoutLocationSetting,
      @NonNull LinearLayout layoutOnePixelActivity, @NonNull LinearLayout layoutOptionalAction,
      @NonNull LinearLayout layoutSim2, @NonNull LinearLayout layoutSmsTemplate,
      @NonNull LinearLayout layoutSpApp, @NonNull RadioButton rbAccuracyCoarse,
      @NonNull RadioButton rbAccuracyFine, @NonNull RadioButton rbAccuracyNoRequirement,
      @NonNull RadioButton rbMainLanguageAuto, @NonNull RadioButton rbMainLanguageCn,
      @NonNull RadioButton rbMainLanguageEn, @NonNull RadioButton rbMainLanguageTw,
      @NonNull RadioButton rbPowerRequirementHigh, @NonNull RadioButton rbPowerRequirementLow,
      @NonNull RadioButton rbPowerRequirementMedium,
      @NonNull RadioButton rbPowerRequirementNoRequirement, @NonNull RadioGroup rgAccuracy,
      @NonNull RadioGroup rgMainLanguages, @NonNull RadioGroup rgPowerRequirement,
      @NonNull SwitchButton sbBatterySetting, @NonNull SwitchButton sbDebugMode,
      @NonNull SwitchButton sbDirectlyToClient, @NonNull SwitchButton sbDirectlyToTask,
      @NonNull SwitchButton sbEnableAccessibilityService, @NonNull SwitchButton sbEnableAppNotify,
      @NonNull SwitchButton sbEnableBluetooth, @NonNull SwitchButton sbEnableCactus,
      @NonNull SwitchButton sbEnableLoadAppList, @NonNull SwitchButton sbEnableLocation,
      @NonNull SwitchButton sbEnablePhone, @NonNull SwitchButton sbEnableSms,
      @NonNull SwitchButton sbEnableSmsCommand, @NonNull SwitchButton sbExcludeFromRecents,
      @NonNull SwitchButton sbSmsTemplate, @NonNull SwitchButton sbWithReboot,
      @NonNull SmoothCheckBox scbCallType1, @NonNull SmoothCheckBox scbCallType2,
      @NonNull SmoothCheckBox scbCallType3, @NonNull SmoothCheckBox scbCallType4,
      @NonNull SmoothCheckBox scbCallType5, @NonNull SmoothCheckBox scbCallType6,
      @NonNull SmoothCheckBox scbCancelAppNotify, @NonNull SmoothCheckBox scbIgnoreAnonymous,
      @NonNull SmoothCheckBox scbLoadSystemApp, @NonNull SmoothCheckBox scbLoadUserApp,
      @NonNull SmoothCheckBox scbNotUserPresent, @NonNull SmoothCheckBox scbOnePixelActivity,
      @NonNull SmoothCheckBox scbPlaySilenceMusic, @NonNull SmoothCheckBox scbSilentPeriodLogs,
      @NonNull EditSpinner spApp, @NonNull TextView tvAutoStartup, @NonNull TextView tvSilentPeriod,
      @NonNull XSeekBar xsbDelayTime, @NonNull XSeekBar xsbDuplicateMessagesLimits,
      @NonNull XSeekBar xsbMinDistance, @NonNull XSeekBar xsbMinInterval,
      @NonNull XSeekBar xsbRetryTimes, @NonNull XSeekBar xsbScanInterval,
      @NonNull XSeekBar xsbTimeout) {
    this.rootView = rootView;
    this.btnExportLog = btnExportLog;
    this.btnExtraDeviceMark = btnExtraDeviceMark;
    this.btnExtraSim1 = btnExtraSim1;
    this.btnExtraSim2 = btnExtraSim2;
    this.btnOption = btnOption;
    this.btnSilentPeriod = btnSilentPeriod;
    this.etAppList = etAppList;
    this.etExtraDeviceMark = etExtraDeviceMark;
    this.etExtraSim1 = etExtraSim1;
    this.etExtraSim2 = etExtraSim2;
    this.etNotifyContent = etNotifyContent;
    this.etSafePhone = etSafePhone;
    this.etSmsTemplate = etSmsTemplate;
    this.etSubidSim1 = etSubidSim1;
    this.etSubidSim2 = etSubidSim2;
    this.glSmsTemplate = glSmsTemplate;
    this.layoutAppList = layoutAppList;
    this.layoutBatterySetting = layoutBatterySetting;
    this.layoutBluetoothSetting = layoutBluetoothSetting;
    this.layoutCactusOptional = layoutCactusOptional;
    this.layoutDelayTime = layoutDelayTime;
    this.layoutExcludeFromRecents = layoutExcludeFromRecents;
    this.layoutLocationSetting = layoutLocationSetting;
    this.layoutOnePixelActivity = layoutOnePixelActivity;
    this.layoutOptionalAction = layoutOptionalAction;
    this.layoutSim2 = layoutSim2;
    this.layoutSmsTemplate = layoutSmsTemplate;
    this.layoutSpApp = layoutSpApp;
    this.rbAccuracyCoarse = rbAccuracyCoarse;
    this.rbAccuracyFine = rbAccuracyFine;
    this.rbAccuracyNoRequirement = rbAccuracyNoRequirement;
    this.rbMainLanguageAuto = rbMainLanguageAuto;
    this.rbMainLanguageCn = rbMainLanguageCn;
    this.rbMainLanguageEn = rbMainLanguageEn;
    this.rbMainLanguageTw = rbMainLanguageTw;
    this.rbPowerRequirementHigh = rbPowerRequirementHigh;
    this.rbPowerRequirementLow = rbPowerRequirementLow;
    this.rbPowerRequirementMedium = rbPowerRequirementMedium;
    this.rbPowerRequirementNoRequirement = rbPowerRequirementNoRequirement;
    this.rgAccuracy = rgAccuracy;
    this.rgMainLanguages = rgMainLanguages;
    this.rgPowerRequirement = rgPowerRequirement;
    this.sbBatterySetting = sbBatterySetting;
    this.sbDebugMode = sbDebugMode;
    this.sbDirectlyToClient = sbDirectlyToClient;
    this.sbDirectlyToTask = sbDirectlyToTask;
    this.sbEnableAccessibilityService = sbEnableAccessibilityService;
    this.sbEnableAppNotify = sbEnableAppNotify;
    this.sbEnableBluetooth = sbEnableBluetooth;
    this.sbEnableCactus = sbEnableCactus;
    this.sbEnableLoadAppList = sbEnableLoadAppList;
    this.sbEnableLocation = sbEnableLocation;
    this.sbEnablePhone = sbEnablePhone;
    this.sbEnableSms = sbEnableSms;
    this.sbEnableSmsCommand = sbEnableSmsCommand;
    this.sbExcludeFromRecents = sbExcludeFromRecents;
    this.sbSmsTemplate = sbSmsTemplate;
    this.sbWithReboot = sbWithReboot;
    this.scbCallType1 = scbCallType1;
    this.scbCallType2 = scbCallType2;
    this.scbCallType3 = scbCallType3;
    this.scbCallType4 = scbCallType4;
    this.scbCallType5 = scbCallType5;
    this.scbCallType6 = scbCallType6;
    this.scbCancelAppNotify = scbCancelAppNotify;
    this.scbIgnoreAnonymous = scbIgnoreAnonymous;
    this.scbLoadSystemApp = scbLoadSystemApp;
    this.scbLoadUserApp = scbLoadUserApp;
    this.scbNotUserPresent = scbNotUserPresent;
    this.scbOnePixelActivity = scbOnePixelActivity;
    this.scbPlaySilenceMusic = scbPlaySilenceMusic;
    this.scbSilentPeriodLogs = scbSilentPeriodLogs;
    this.spApp = spApp;
    this.tvAutoStartup = tvAutoStartup;
    this.tvSilentPeriod = tvSilentPeriod;
    this.xsbDelayTime = xsbDelayTime;
    this.xsbDuplicateMessagesLimits = xsbDuplicateMessagesLimits;
    this.xsbMinDistance = xsbMinDistance;
    this.xsbMinInterval = xsbMinInterval;
    this.xsbRetryTimes = xsbRetryTimes;
    this.xsbScanInterval = xsbScanInterval;
    this.xsbTimeout = xsbTimeout;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_export_log;
      RippleShadowShadowButton btnExportLog = ViewBindings.findChildViewById(rootView, id);
      if (btnExportLog == null) {
        break missingId;
      }

      id = R.id.btn_extra_device_mark;
      RippleShadowShadowButton btnExtraDeviceMark = ViewBindings.findChildViewById(rootView, id);
      if (btnExtraDeviceMark == null) {
        break missingId;
      }

      id = R.id.btn_extra_sim1;
      RippleShadowShadowButton btnExtraSim1 = ViewBindings.findChildViewById(rootView, id);
      if (btnExtraSim1 == null) {
        break missingId;
      }

      id = R.id.btn_extra_sim2;
      RippleShadowShadowButton btnExtraSim2 = ViewBindings.findChildViewById(rootView, id);
      if (btnExtraSim2 == null) {
        break missingId;
      }

      id = R.id.btn_option;
      RippleShadowShadowButton btnOption = ViewBindings.findChildViewById(rootView, id);
      if (btnOption == null) {
        break missingId;
      }

      id = R.id.btn_silent_period;
      RippleShadowShadowButton btnSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (btnSilentPeriod == null) {
        break missingId;
      }

      id = R.id.et_app_list;
      MaterialEditText etAppList = ViewBindings.findChildViewById(rootView, id);
      if (etAppList == null) {
        break missingId;
      }

      id = R.id.et_extra_device_mark;
      ClearEditText etExtraDeviceMark = ViewBindings.findChildViewById(rootView, id);
      if (etExtraDeviceMark == null) {
        break missingId;
      }

      id = R.id.et_extra_sim1;
      MaterialEditText etExtraSim1 = ViewBindings.findChildViewById(rootView, id);
      if (etExtraSim1 == null) {
        break missingId;
      }

      id = R.id.et_extra_sim2;
      MaterialEditText etExtraSim2 = ViewBindings.findChildViewById(rootView, id);
      if (etExtraSim2 == null) {
        break missingId;
      }

      id = R.id.et_notify_content;
      ClearEditText etNotifyContent = ViewBindings.findChildViewById(rootView, id);
      if (etNotifyContent == null) {
        break missingId;
      }

      id = R.id.et_safe_phone;
      ClearEditText etSafePhone = ViewBindings.findChildViewById(rootView, id);
      if (etSafePhone == null) {
        break missingId;
      }

      id = R.id.et_sms_template;
      ClearEditText etSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etSmsTemplate == null) {
        break missingId;
      }

      id = R.id.et_subid_sim1;
      MaterialEditText etSubidSim1 = ViewBindings.findChildViewById(rootView, id);
      if (etSubidSim1 == null) {
        break missingId;
      }

      id = R.id.et_subid_sim2;
      MaterialEditText etSubidSim2 = ViewBindings.findChildViewById(rootView, id);
      if (etSubidSim2 == null) {
        break missingId;
      }

      id = R.id.gl_sms_template;
      GridLayout glSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (glSmsTemplate == null) {
        break missingId;
      }

      id = R.id.layout_app_list;
      LinearLayout layoutAppList = ViewBindings.findChildViewById(rootView, id);
      if (layoutAppList == null) {
        break missingId;
      }

      id = R.id.layout_battery_setting;
      LinearLayout layoutBatterySetting = ViewBindings.findChildViewById(rootView, id);
      if (layoutBatterySetting == null) {
        break missingId;
      }

      id = R.id.layout_bluetooth_setting;
      LinearLayout layoutBluetoothSetting = ViewBindings.findChildViewById(rootView, id);
      if (layoutBluetoothSetting == null) {
        break missingId;
      }

      id = R.id.layout_cactus_optional;
      LinearLayout layoutCactusOptional = ViewBindings.findChildViewById(rootView, id);
      if (layoutCactusOptional == null) {
        break missingId;
      }

      id = R.id.layout_delay_time;
      LinearLayout layoutDelayTime = ViewBindings.findChildViewById(rootView, id);
      if (layoutDelayTime == null) {
        break missingId;
      }

      id = R.id.layout_exclude_from_recents;
      LinearLayout layoutExcludeFromRecents = ViewBindings.findChildViewById(rootView, id);
      if (layoutExcludeFromRecents == null) {
        break missingId;
      }

      id = R.id.layout_location_setting;
      LinearLayout layoutLocationSetting = ViewBindings.findChildViewById(rootView, id);
      if (layoutLocationSetting == null) {
        break missingId;
      }

      id = R.id.layout_one_pixel_activity;
      LinearLayout layoutOnePixelActivity = ViewBindings.findChildViewById(rootView, id);
      if (layoutOnePixelActivity == null) {
        break missingId;
      }

      id = R.id.layout_optional_action;
      LinearLayout layoutOptionalAction = ViewBindings.findChildViewById(rootView, id);
      if (layoutOptionalAction == null) {
        break missingId;
      }

      id = R.id.layout_sim2;
      LinearLayout layoutSim2 = ViewBindings.findChildViewById(rootView, id);
      if (layoutSim2 == null) {
        break missingId;
      }

      id = R.id.layout_sms_template;
      LinearLayout layoutSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (layoutSmsTemplate == null) {
        break missingId;
      }

      id = R.id.layout_sp_app;
      LinearLayout layoutSpApp = ViewBindings.findChildViewById(rootView, id);
      if (layoutSpApp == null) {
        break missingId;
      }

      id = R.id.rb_accuracy_coarse;
      RadioButton rbAccuracyCoarse = ViewBindings.findChildViewById(rootView, id);
      if (rbAccuracyCoarse == null) {
        break missingId;
      }

      id = R.id.rb_accuracy_fine;
      RadioButton rbAccuracyFine = ViewBindings.findChildViewById(rootView, id);
      if (rbAccuracyFine == null) {
        break missingId;
      }

      id = R.id.rb_accuracy_no_requirement;
      RadioButton rbAccuracyNoRequirement = ViewBindings.findChildViewById(rootView, id);
      if (rbAccuracyNoRequirement == null) {
        break missingId;
      }

      id = R.id.rb_main_language_auto;
      RadioButton rbMainLanguageAuto = ViewBindings.findChildViewById(rootView, id);
      if (rbMainLanguageAuto == null) {
        break missingId;
      }

      id = R.id.rb_main_language_cn;
      RadioButton rbMainLanguageCn = ViewBindings.findChildViewById(rootView, id);
      if (rbMainLanguageCn == null) {
        break missingId;
      }

      id = R.id.rb_main_language_en;
      RadioButton rbMainLanguageEn = ViewBindings.findChildViewById(rootView, id);
      if (rbMainLanguageEn == null) {
        break missingId;
      }

      id = R.id.rb_main_language_tw;
      RadioButton rbMainLanguageTw = ViewBindings.findChildViewById(rootView, id);
      if (rbMainLanguageTw == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_high;
      RadioButton rbPowerRequirementHigh = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementHigh == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_low;
      RadioButton rbPowerRequirementLow = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementLow == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_medium;
      RadioButton rbPowerRequirementMedium = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementMedium == null) {
        break missingId;
      }

      id = R.id.rb_power_requirement_no_requirement;
      RadioButton rbPowerRequirementNoRequirement = ViewBindings.findChildViewById(rootView, id);
      if (rbPowerRequirementNoRequirement == null) {
        break missingId;
      }

      id = R.id.rg_accuracy;
      RadioGroup rgAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (rgAccuracy == null) {
        break missingId;
      }

      id = R.id.rg_main_languages;
      RadioGroup rgMainLanguages = ViewBindings.findChildViewById(rootView, id);
      if (rgMainLanguages == null) {
        break missingId;
      }

      id = R.id.rg_power_requirement;
      RadioGroup rgPowerRequirement = ViewBindings.findChildViewById(rootView, id);
      if (rgPowerRequirement == null) {
        break missingId;
      }

      id = R.id.sb_battery_setting;
      SwitchButton sbBatterySetting = ViewBindings.findChildViewById(rootView, id);
      if (sbBatterySetting == null) {
        break missingId;
      }

      id = R.id.sb_debug_mode;
      SwitchButton sbDebugMode = ViewBindings.findChildViewById(rootView, id);
      if (sbDebugMode == null) {
        break missingId;
      }

      id = R.id.sb_directly_to_client;
      SwitchButton sbDirectlyToClient = ViewBindings.findChildViewById(rootView, id);
      if (sbDirectlyToClient == null) {
        break missingId;
      }

      id = R.id.sb_directly_to_task;
      SwitchButton sbDirectlyToTask = ViewBindings.findChildViewById(rootView, id);
      if (sbDirectlyToTask == null) {
        break missingId;
      }

      id = R.id.sb_enable_accessibility_service;
      SwitchButton sbEnableAccessibilityService = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableAccessibilityService == null) {
        break missingId;
      }

      id = R.id.sb_enable_app_notify;
      SwitchButton sbEnableAppNotify = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableAppNotify == null) {
        break missingId;
      }

      id = R.id.sb_enable_bluetooth;
      SwitchButton sbEnableBluetooth = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableBluetooth == null) {
        break missingId;
      }

      id = R.id.sb_enable_cactus;
      SwitchButton sbEnableCactus = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableCactus == null) {
        break missingId;
      }

      id = R.id.sb_enable_load_app_list;
      SwitchButton sbEnableLoadAppList = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableLoadAppList == null) {
        break missingId;
      }

      id = R.id.sb_enable_location;
      SwitchButton sbEnableLocation = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableLocation == null) {
        break missingId;
      }

      id = R.id.sb_enable_phone;
      SwitchButton sbEnablePhone = ViewBindings.findChildViewById(rootView, id);
      if (sbEnablePhone == null) {
        break missingId;
      }

      id = R.id.sb_enable_sms;
      SwitchButton sbEnableSms = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableSms == null) {
        break missingId;
      }

      id = R.id.sb_enable_sms_command;
      SwitchButton sbEnableSmsCommand = ViewBindings.findChildViewById(rootView, id);
      if (sbEnableSmsCommand == null) {
        break missingId;
      }

      id = R.id.sb_exclude_from_recents;
      SwitchButton sbExcludeFromRecents = ViewBindings.findChildViewById(rootView, id);
      if (sbExcludeFromRecents == null) {
        break missingId;
      }

      id = R.id.sb_sms_template;
      SwitchButton sbSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (sbSmsTemplate == null) {
        break missingId;
      }

      id = R.id.sb_with_reboot;
      SwitchButton sbWithReboot = ViewBindings.findChildViewById(rootView, id);
      if (sbWithReboot == null) {
        break missingId;
      }

      id = R.id.scb_call_type1;
      SmoothCheckBox scbCallType1 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType1 == null) {
        break missingId;
      }

      id = R.id.scb_call_type2;
      SmoothCheckBox scbCallType2 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType2 == null) {
        break missingId;
      }

      id = R.id.scb_call_type3;
      SmoothCheckBox scbCallType3 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType3 == null) {
        break missingId;
      }

      id = R.id.scb_call_type4;
      SmoothCheckBox scbCallType4 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType4 == null) {
        break missingId;
      }

      id = R.id.scb_call_type5;
      SmoothCheckBox scbCallType5 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType5 == null) {
        break missingId;
      }

      id = R.id.scb_call_type6;
      SmoothCheckBox scbCallType6 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType6 == null) {
        break missingId;
      }

      id = R.id.scb_cancel_app_notify;
      SmoothCheckBox scbCancelAppNotify = ViewBindings.findChildViewById(rootView, id);
      if (scbCancelAppNotify == null) {
        break missingId;
      }

      id = R.id.scb_ignore_anonymous;
      SmoothCheckBox scbIgnoreAnonymous = ViewBindings.findChildViewById(rootView, id);
      if (scbIgnoreAnonymous == null) {
        break missingId;
      }

      id = R.id.scb_load_system_app;
      SmoothCheckBox scbLoadSystemApp = ViewBindings.findChildViewById(rootView, id);
      if (scbLoadSystemApp == null) {
        break missingId;
      }

      id = R.id.scb_load_user_app;
      SmoothCheckBox scbLoadUserApp = ViewBindings.findChildViewById(rootView, id);
      if (scbLoadUserApp == null) {
        break missingId;
      }

      id = R.id.scb_not_user_present;
      SmoothCheckBox scbNotUserPresent = ViewBindings.findChildViewById(rootView, id);
      if (scbNotUserPresent == null) {
        break missingId;
      }

      id = R.id.scb_one_pixel_activity;
      SmoothCheckBox scbOnePixelActivity = ViewBindings.findChildViewById(rootView, id);
      if (scbOnePixelActivity == null) {
        break missingId;
      }

      id = R.id.scb_play_silence_music;
      SmoothCheckBox scbPlaySilenceMusic = ViewBindings.findChildViewById(rootView, id);
      if (scbPlaySilenceMusic == null) {
        break missingId;
      }

      id = R.id.scb_silent_period_logs;
      SmoothCheckBox scbSilentPeriodLogs = ViewBindings.findChildViewById(rootView, id);
      if (scbSilentPeriodLogs == null) {
        break missingId;
      }

      id = R.id.sp_app;
      EditSpinner spApp = ViewBindings.findChildViewById(rootView, id);
      if (spApp == null) {
        break missingId;
      }

      id = R.id.tv_auto_startup;
      TextView tvAutoStartup = ViewBindings.findChildViewById(rootView, id);
      if (tvAutoStartup == null) {
        break missingId;
      }

      id = R.id.tv_silent_period;
      TextView tvSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (tvSilentPeriod == null) {
        break missingId;
      }

      id = R.id.xsb_delay_time;
      XSeekBar xsbDelayTime = ViewBindings.findChildViewById(rootView, id);
      if (xsbDelayTime == null) {
        break missingId;
      }

      id = R.id.xsb_duplicate_messages_limits;
      XSeekBar xsbDuplicateMessagesLimits = ViewBindings.findChildViewById(rootView, id);
      if (xsbDuplicateMessagesLimits == null) {
        break missingId;
      }

      id = R.id.xsb_min_distance;
      XSeekBar xsbMinDistance = ViewBindings.findChildViewById(rootView, id);
      if (xsbMinDistance == null) {
        break missingId;
      }

      id = R.id.xsb_min_interval;
      XSeekBar xsbMinInterval = ViewBindings.findChildViewById(rootView, id);
      if (xsbMinInterval == null) {
        break missingId;
      }

      id = R.id.xsb_retry_times;
      XSeekBar xsbRetryTimes = ViewBindings.findChildViewById(rootView, id);
      if (xsbRetryTimes == null) {
        break missingId;
      }

      id = R.id.xsb_scan_interval;
      XSeekBar xsbScanInterval = ViewBindings.findChildViewById(rootView, id);
      if (xsbScanInterval == null) {
        break missingId;
      }

      id = R.id.xsb_timeout;
      XSeekBar xsbTimeout = ViewBindings.findChildViewById(rootView, id);
      if (xsbTimeout == null) {
        break missingId;
      }

      return new FragmentSettingsBinding((LinearLayout) rootView, btnExportLog, btnExtraDeviceMark,
          btnExtraSim1, btnExtraSim2, btnOption, btnSilentPeriod, etAppList, etExtraDeviceMark,
          etExtraSim1, etExtraSim2, etNotifyContent, etSafePhone, etSmsTemplate, etSubidSim1,
          etSubidSim2, glSmsTemplate, layoutAppList, layoutBatterySetting, layoutBluetoothSetting,
          layoutCactusOptional, layoutDelayTime, layoutExcludeFromRecents, layoutLocationSetting,
          layoutOnePixelActivity, layoutOptionalAction, layoutSim2, layoutSmsTemplate, layoutSpApp,
          rbAccuracyCoarse, rbAccuracyFine, rbAccuracyNoRequirement, rbMainLanguageAuto,
          rbMainLanguageCn, rbMainLanguageEn, rbMainLanguageTw, rbPowerRequirementHigh,
          rbPowerRequirementLow, rbPowerRequirementMedium, rbPowerRequirementNoRequirement,
          rgAccuracy, rgMainLanguages, rgPowerRequirement, sbBatterySetting, sbDebugMode,
          sbDirectlyToClient, sbDirectlyToTask, sbEnableAccessibilityService, sbEnableAppNotify,
          sbEnableBluetooth, sbEnableCactus, sbEnableLoadAppList, sbEnableLocation, sbEnablePhone,
          sbEnableSms, sbEnableSmsCommand, sbExcludeFromRecents, sbSmsTemplate, sbWithReboot,
          scbCallType1, scbCallType2, scbCallType3, scbCallType4, scbCallType5, scbCallType6,
          scbCancelAppNotify, scbIgnoreAnonymous, scbLoadSystemApp, scbLoadUserApp,
          scbNotUserPresent, scbOnePixelActivity, scbPlaySilenceMusic, scbSilentPeriodLogs, spApp,
          tvAutoStartup, tvSilentPeriod, xsbDelayTime, xsbDuplicateMessagesLimits, xsbMinDistance,
          xsbMinInterval, xsbRetryTimes, xsbScanInterval, xsbTimeout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
