// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.tabbar.EasyIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentClientCloneBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnExport;

  @NonNull
  public final Button btnImport;

  @NonNull
  public final Button btnPull;

  @NonNull
  public final Button btnPush;

  @NonNull
  public final LinearLayout layoutNetwork;

  @NonNull
  public final LinearLayout layoutOffline;

  @NonNull
  public final EasyIndicator tabBar;

  @NonNull
  public final TextView tvBackupPath;

  @NonNull
  public final TextView tvExport;

  @NonNull
  public final TextView tvImport;

  @NonNull
  public final TextView tvReceive;

  @NonNull
  public final TextView tvSend;

  private FragmentClientCloneBinding(@NonNull LinearLayout rootView, @NonNull Button btnExport,
      @NonNull Button btnImport, @NonNull Button btnPull, @NonNull Button btnPush,
      @NonNull LinearLayout layoutNetwork, @NonNull LinearLayout layoutOffline,
      @NonNull EasyIndicator tabBar, @NonNull TextView tvBackupPath, @NonNull TextView tvExport,
      @NonNull TextView tvImport, @NonNull TextView tvReceive, @NonNull TextView tvSend) {
    this.rootView = rootView;
    this.btnExport = btnExport;
    this.btnImport = btnImport;
    this.btnPull = btnPull;
    this.btnPush = btnPush;
    this.layoutNetwork = layoutNetwork;
    this.layoutOffline = layoutOffline;
    this.tabBar = tabBar;
    this.tvBackupPath = tvBackupPath;
    this.tvExport = tvExport;
    this.tvImport = tvImport;
    this.tvReceive = tvReceive;
    this.tvSend = tvSend;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentClientCloneBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentClientCloneBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_client_clone, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentClientCloneBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_export;
      Button btnExport = ViewBindings.findChildViewById(rootView, id);
      if (btnExport == null) {
        break missingId;
      }

      id = R.id.btn_import;
      Button btnImport = ViewBindings.findChildViewById(rootView, id);
      if (btnImport == null) {
        break missingId;
      }

      id = R.id.btn_pull;
      Button btnPull = ViewBindings.findChildViewById(rootView, id);
      if (btnPull == null) {
        break missingId;
      }

      id = R.id.btn_push;
      Button btnPush = ViewBindings.findChildViewById(rootView, id);
      if (btnPush == null) {
        break missingId;
      }

      id = R.id.layout_network;
      LinearLayout layoutNetwork = ViewBindings.findChildViewById(rootView, id);
      if (layoutNetwork == null) {
        break missingId;
      }

      id = R.id.layout_offline;
      LinearLayout layoutOffline = ViewBindings.findChildViewById(rootView, id);
      if (layoutOffline == null) {
        break missingId;
      }

      id = R.id.tabBar;
      EasyIndicator tabBar = ViewBindings.findChildViewById(rootView, id);
      if (tabBar == null) {
        break missingId;
      }

      id = R.id.tv_backup_path;
      TextView tvBackupPath = ViewBindings.findChildViewById(rootView, id);
      if (tvBackupPath == null) {
        break missingId;
      }

      id = R.id.tv_export;
      TextView tvExport = ViewBindings.findChildViewById(rootView, id);
      if (tvExport == null) {
        break missingId;
      }

      id = R.id.tv_import;
      TextView tvImport = ViewBindings.findChildViewById(rootView, id);
      if (tvImport == null) {
        break missingId;
      }

      id = R.id.tv_receive;
      TextView tvReceive = ViewBindings.findChildViewById(rootView, id);
      if (tvReceive == null) {
        break missingId;
      }

      id = R.id.tv_send;
      TextView tvSend = ViewBindings.findChildViewById(rootView, id);
      if (tvSend == null) {
        break missingId;
      }

      return new FragmentClientCloneBinding((LinearLayout) rootView, btnExport, btnImport, btnPull,
          btnPush, layoutNetwork, layoutOffline, tabBar, tvBackupPath, tvExport, tvImport,
          tvReceive, tvSend);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
