// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.materialspinner.MaterialSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSendersSocketBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etAddress;

  @NonNull
  public final MaterialEditText etClientId;

  @NonNull
  public final MaterialSpinner etInCharset;

  @NonNull
  public final MaterialEditText etInMessageTopic;

  @NonNull
  public final MaterialEditText etMsgTemplate;

  @NonNull
  public final MaterialEditText etName;

  @NonNull
  public final MaterialSpinner etOutCharset;

  @NonNull
  public final MaterialEditText etOutMessageTopic;

  @NonNull
  public final MaterialEditText etPassword;

  @NonNull
  public final MaterialEditText etPath;

  @NonNull
  public final MaterialEditText etPort;

  @NonNull
  public final MaterialEditText etResponse;

  @NonNull
  public final MaterialEditText etSecret;

  @NonNull
  public final MaterialEditText etUsername;

  @NonNull
  public final LinearLayout layoutMqtt;

  @NonNull
  public final RadioButton rbMethodMqtt;

  @NonNull
  public final RadioButton rbMethodTcp;

  @NonNull
  public final RadioButton rbMethodUdp;

  @NonNull
  public final RadioButton rbUriTypeSsl;

  @NonNull
  public final RadioButton rbUriTypeTcp;

  @NonNull
  public final RadioGroup rgMethod;

  @NonNull
  public final RadioGroup rgUriType;

  @NonNull
  public final SwitchButton sbEnable;

  private FragmentSendersSocketBinding(@NonNull LinearLayout rootView, @NonNull SuperButton btnDel,
      @NonNull SuperButton btnSave, @NonNull SuperButton btnTest,
      @NonNull MaterialEditText etAddress, @NonNull MaterialEditText etClientId,
      @NonNull MaterialSpinner etInCharset, @NonNull MaterialEditText etInMessageTopic,
      @NonNull MaterialEditText etMsgTemplate, @NonNull MaterialEditText etName,
      @NonNull MaterialSpinner etOutCharset, @NonNull MaterialEditText etOutMessageTopic,
      @NonNull MaterialEditText etPassword, @NonNull MaterialEditText etPath,
      @NonNull MaterialEditText etPort, @NonNull MaterialEditText etResponse,
      @NonNull MaterialEditText etSecret, @NonNull MaterialEditText etUsername,
      @NonNull LinearLayout layoutMqtt, @NonNull RadioButton rbMethodMqtt,
      @NonNull RadioButton rbMethodTcp, @NonNull RadioButton rbMethodUdp,
      @NonNull RadioButton rbUriTypeSsl, @NonNull RadioButton rbUriTypeTcp,
      @NonNull RadioGroup rgMethod, @NonNull RadioGroup rgUriType, @NonNull SwitchButton sbEnable) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnTest = btnTest;
    this.etAddress = etAddress;
    this.etClientId = etClientId;
    this.etInCharset = etInCharset;
    this.etInMessageTopic = etInMessageTopic;
    this.etMsgTemplate = etMsgTemplate;
    this.etName = etName;
    this.etOutCharset = etOutCharset;
    this.etOutMessageTopic = etOutMessageTopic;
    this.etPassword = etPassword;
    this.etPath = etPath;
    this.etPort = etPort;
    this.etResponse = etResponse;
    this.etSecret = etSecret;
    this.etUsername = etUsername;
    this.layoutMqtt = layoutMqtt;
    this.rbMethodMqtt = rbMethodMqtt;
    this.rbMethodTcp = rbMethodTcp;
    this.rbMethodUdp = rbMethodUdp;
    this.rbUriTypeSsl = rbUriTypeSsl;
    this.rbUriTypeTcp = rbUriTypeTcp;
    this.rgMethod = rgMethod;
    this.rgUriType = rgUriType;
    this.sbEnable = sbEnable;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSendersSocketBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSendersSocketBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_senders_socket, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSendersSocketBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_address;
      MaterialEditText etAddress = ViewBindings.findChildViewById(rootView, id);
      if (etAddress == null) {
        break missingId;
      }

      id = R.id.et_clientId;
      MaterialEditText etClientId = ViewBindings.findChildViewById(rootView, id);
      if (etClientId == null) {
        break missingId;
      }

      id = R.id.et_inCharset;
      MaterialSpinner etInCharset = ViewBindings.findChildViewById(rootView, id);
      if (etInCharset == null) {
        break missingId;
      }

      id = R.id.et_inMessageTopic;
      MaterialEditText etInMessageTopic = ViewBindings.findChildViewById(rootView, id);
      if (etInMessageTopic == null) {
        break missingId;
      }

      id = R.id.et_msgTemplate;
      MaterialEditText etMsgTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etMsgTemplate == null) {
        break missingId;
      }

      id = R.id.et_name;
      MaterialEditText etName = ViewBindings.findChildViewById(rootView, id);
      if (etName == null) {
        break missingId;
      }

      id = R.id.et_outCharset;
      MaterialSpinner etOutCharset = ViewBindings.findChildViewById(rootView, id);
      if (etOutCharset == null) {
        break missingId;
      }

      id = R.id.et_outMessageTopic;
      MaterialEditText etOutMessageTopic = ViewBindings.findChildViewById(rootView, id);
      if (etOutMessageTopic == null) {
        break missingId;
      }

      id = R.id.et_password;
      MaterialEditText etPassword = ViewBindings.findChildViewById(rootView, id);
      if (etPassword == null) {
        break missingId;
      }

      id = R.id.et_path;
      MaterialEditText etPath = ViewBindings.findChildViewById(rootView, id);
      if (etPath == null) {
        break missingId;
      }

      id = R.id.et_port;
      MaterialEditText etPort = ViewBindings.findChildViewById(rootView, id);
      if (etPort == null) {
        break missingId;
      }

      id = R.id.et_Response;
      MaterialEditText etResponse = ViewBindings.findChildViewById(rootView, id);
      if (etResponse == null) {
        break missingId;
      }

      id = R.id.et_Secret;
      MaterialEditText etSecret = ViewBindings.findChildViewById(rootView, id);
      if (etSecret == null) {
        break missingId;
      }

      id = R.id.et_username;
      MaterialEditText etUsername = ViewBindings.findChildViewById(rootView, id);
      if (etUsername == null) {
        break missingId;
      }

      id = R.id.layout_mqtt;
      LinearLayout layoutMqtt = ViewBindings.findChildViewById(rootView, id);
      if (layoutMqtt == null) {
        break missingId;
      }

      id = R.id.rb_method_mqtt;
      RadioButton rbMethodMqtt = ViewBindings.findChildViewById(rootView, id);
      if (rbMethodMqtt == null) {
        break missingId;
      }

      id = R.id.rb_method_tcp;
      RadioButton rbMethodTcp = ViewBindings.findChildViewById(rootView, id);
      if (rbMethodTcp == null) {
        break missingId;
      }

      id = R.id.rb_method_udp;
      RadioButton rbMethodUdp = ViewBindings.findChildViewById(rootView, id);
      if (rbMethodUdp == null) {
        break missingId;
      }

      id = R.id.rb_uriType_ssl;
      RadioButton rbUriTypeSsl = ViewBindings.findChildViewById(rootView, id);
      if (rbUriTypeSsl == null) {
        break missingId;
      }

      id = R.id.rb_uriType_tcp;
      RadioButton rbUriTypeTcp = ViewBindings.findChildViewById(rootView, id);
      if (rbUriTypeTcp == null) {
        break missingId;
      }

      id = R.id.rg_method;
      RadioGroup rgMethod = ViewBindings.findChildViewById(rootView, id);
      if (rgMethod == null) {
        break missingId;
      }

      id = R.id.rg_uriType;
      RadioGroup rgUriType = ViewBindings.findChildViewById(rootView, id);
      if (rgUriType == null) {
        break missingId;
      }

      id = R.id.sb_enable;
      SwitchButton sbEnable = ViewBindings.findChildViewById(rootView, id);
      if (sbEnable == null) {
        break missingId;
      }

      return new FragmentSendersSocketBinding((LinearLayout) rootView, btnDel, btnSave, btnTest,
          etAddress, etClientId, etInCharset, etInMessageTopic, etMsgTemplate, etName, etOutCharset,
          etOutMessageTopic, etPassword, etPath, etPort, etResponse, etSecret, etUsername,
          layoutMqtt, rbMethodMqtt, rbMethodTcp, rbMethodUdp, rbUriTypeSsl, rbUriTypeTcp, rgMethod,
          rgUriType, sbEnable);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
