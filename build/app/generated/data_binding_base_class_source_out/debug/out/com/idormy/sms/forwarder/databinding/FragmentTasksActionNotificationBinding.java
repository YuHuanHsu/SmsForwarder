// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.editspinner.EditSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTasksActionNotificationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final RippleShadowShadowButton btnSilentPeriod;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etRegexReplace;

  @NonNull
  public final MaterialEditText etSmsTemplate;

  @NonNull
  public final GridLayout glSmsTemplate;

  @NonNull
  public final LinearLayout layoutRegexReplace;

  @NonNull
  public final LinearLayout layoutSenderLogic;

  @NonNull
  public final LinearLayout layoutSilentPeriod;

  @NonNull
  public final LinearLayout layoutSmsTemplate;

  @NonNull
  public final RadioButton rbSenderLogicAll;

  @NonNull
  public final RadioButton rbSenderLogicUntilFail;

  @NonNull
  public final RadioButton rbSenderLogicUntilSuccess;

  @NonNull
  public final RecyclerView recyclerSenders;

  @NonNull
  public final RadioGroup rgSenderLogic;

  @NonNull
  public final SwitchButton sbRegexReplace;

  @NonNull
  public final SwitchButton sbSmsTemplate;

  @NonNull
  public final EditSpinner spSender;

  @NonNull
  public final TextView tvSilentPeriod;

  private FragmentTasksActionNotificationBinding(@NonNull LinearLayout rootView,
      @NonNull SuperButton btnDel, @NonNull SuperButton btnSave,
      @NonNull RippleShadowShadowButton btnSilentPeriod, @NonNull SuperButton btnTest,
      @NonNull MaterialEditText etRegexReplace, @NonNull MaterialEditText etSmsTemplate,
      @NonNull GridLayout glSmsTemplate, @NonNull LinearLayout layoutRegexReplace,
      @NonNull LinearLayout layoutSenderLogic, @NonNull LinearLayout layoutSilentPeriod,
      @NonNull LinearLayout layoutSmsTemplate, @NonNull RadioButton rbSenderLogicAll,
      @NonNull RadioButton rbSenderLogicUntilFail, @NonNull RadioButton rbSenderLogicUntilSuccess,
      @NonNull RecyclerView recyclerSenders, @NonNull RadioGroup rgSenderLogic,
      @NonNull SwitchButton sbRegexReplace, @NonNull SwitchButton sbSmsTemplate,
      @NonNull EditSpinner spSender, @NonNull TextView tvSilentPeriod) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnSilentPeriod = btnSilentPeriod;
    this.btnTest = btnTest;
    this.etRegexReplace = etRegexReplace;
    this.etSmsTemplate = etSmsTemplate;
    this.glSmsTemplate = glSmsTemplate;
    this.layoutRegexReplace = layoutRegexReplace;
    this.layoutSenderLogic = layoutSenderLogic;
    this.layoutSilentPeriod = layoutSilentPeriod;
    this.layoutSmsTemplate = layoutSmsTemplate;
    this.rbSenderLogicAll = rbSenderLogicAll;
    this.rbSenderLogicUntilFail = rbSenderLogicUntilFail;
    this.rbSenderLogicUntilSuccess = rbSenderLogicUntilSuccess;
    this.recyclerSenders = recyclerSenders;
    this.rgSenderLogic = rgSenderLogic;
    this.sbRegexReplace = sbRegexReplace;
    this.sbSmsTemplate = sbSmsTemplate;
    this.spSender = spSender;
    this.tvSilentPeriod = tvSilentPeriod;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTasksActionNotificationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTasksActionNotificationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tasks_action_notification, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTasksActionNotificationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_silent_period;
      RippleShadowShadowButton btnSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (btnSilentPeriod == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_regex_replace;
      MaterialEditText etRegexReplace = ViewBindings.findChildViewById(rootView, id);
      if (etRegexReplace == null) {
        break missingId;
      }

      id = R.id.et_sms_template;
      MaterialEditText etSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etSmsTemplate == null) {
        break missingId;
      }

      id = R.id.gl_sms_template;
      GridLayout glSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (glSmsTemplate == null) {
        break missingId;
      }

      id = R.id.layout_regex_replace;
      LinearLayout layoutRegexReplace = ViewBindings.findChildViewById(rootView, id);
      if (layoutRegexReplace == null) {
        break missingId;
      }

      id = R.id.layout_sender_logic;
      LinearLayout layoutSenderLogic = ViewBindings.findChildViewById(rootView, id);
      if (layoutSenderLogic == null) {
        break missingId;
      }

      id = R.id.layout_silent_period;
      LinearLayout layoutSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (layoutSilentPeriod == null) {
        break missingId;
      }

      id = R.id.layout_sms_template;
      LinearLayout layoutSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (layoutSmsTemplate == null) {
        break missingId;
      }

      id = R.id.rb_sender_logic_all;
      RadioButton rbSenderLogicAll = ViewBindings.findChildViewById(rootView, id);
      if (rbSenderLogicAll == null) {
        break missingId;
      }

      id = R.id.rb_sender_logic_until_fail;
      RadioButton rbSenderLogicUntilFail = ViewBindings.findChildViewById(rootView, id);
      if (rbSenderLogicUntilFail == null) {
        break missingId;
      }

      id = R.id.rb_sender_logic_until_success;
      RadioButton rbSenderLogicUntilSuccess = ViewBindings.findChildViewById(rootView, id);
      if (rbSenderLogicUntilSuccess == null) {
        break missingId;
      }

      id = R.id.recycler_senders;
      RecyclerView recyclerSenders = ViewBindings.findChildViewById(rootView, id);
      if (recyclerSenders == null) {
        break missingId;
      }

      id = R.id.rg_sender_logic;
      RadioGroup rgSenderLogic = ViewBindings.findChildViewById(rootView, id);
      if (rgSenderLogic == null) {
        break missingId;
      }

      id = R.id.sb_regex_replace;
      SwitchButton sbRegexReplace = ViewBindings.findChildViewById(rootView, id);
      if (sbRegexReplace == null) {
        break missingId;
      }

      id = R.id.sb_sms_template;
      SwitchButton sbSmsTemplate = ViewBindings.findChildViewById(rootView, id);
      if (sbSmsTemplate == null) {
        break missingId;
      }

      id = R.id.sp_sender;
      EditSpinner spSender = ViewBindings.findChildViewById(rootView, id);
      if (spSender == null) {
        break missingId;
      }

      id = R.id.tv_silent_period;
      TextView tvSilentPeriod = ViewBindings.findChildViewById(rootView, id);
      if (tvSilentPeriod == null) {
        break missingId;
      }

      return new FragmentTasksActionNotificationBinding((LinearLayout) rootView, btnDel, btnSave,
          btnSilentPeriod, btnTest, etRegexReplace, etSmsTemplate, glSmsTemplate,
          layoutRegexReplace, layoutSenderLogic, layoutSilentPeriod, layoutSmsTemplate,
          rbSenderLogicAll, rbSenderLogicUntilFail, rbSenderLogicUntilSuccess, recyclerSenders,
          rgSenderLogic, sbRegexReplace, sbSmsTemplate, spSender, tvSilentPeriod);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
