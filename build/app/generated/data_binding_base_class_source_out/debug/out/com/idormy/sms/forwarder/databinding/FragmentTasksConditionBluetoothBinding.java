// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.shadowbutton.RippleShadowShadowButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTasksConditionBluetoothBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final RippleShadowShadowButton btnStartDiscovery;

  @NonNull
  public final MaterialEditText etDeviceAddress;

  @NonNull
  public final LinearLayout layoutBluetoothState;

  @NonNull
  public final LinearLayout layoutDeviceAddress;

  @NonNull
  public final LinearLayout layoutDiscoveryFinished;

  @NonNull
  public final RadioButton rbActionAclConnected;

  @NonNull
  public final RadioButton rbActionAclDisconnected;

  @NonNull
  public final RadioButton rbActionDiscoveryFinished;

  @NonNull
  public final RadioButton rbActionStateChanged;

  @NonNull
  public final RadioButton rbDiscovered;

  @NonNull
  public final RadioButton rbStateOff;

  @NonNull
  public final RadioButton rbStateOn;

  @NonNull
  public final RadioButton rbUndiscovered;

  @NonNull
  public final RecyclerView recyclerDevices;

  @NonNull
  public final RadioGroup rgBluetoothAction;

  @NonNull
  public final RadioGroup rgBluetoothState;

  @NonNull
  public final RadioGroup rgDiscoveryResult;

  @NonNull
  public final TextView tvDescription;

  private FragmentTasksConditionBluetoothBinding(@NonNull LinearLayout rootView,
      @NonNull SuperButton btnDel, @NonNull SuperButton btnSave,
      @NonNull RippleShadowShadowButton btnStartDiscovery,
      @NonNull MaterialEditText etDeviceAddress, @NonNull LinearLayout layoutBluetoothState,
      @NonNull LinearLayout layoutDeviceAddress, @NonNull LinearLayout layoutDiscoveryFinished,
      @NonNull RadioButton rbActionAclConnected, @NonNull RadioButton rbActionAclDisconnected,
      @NonNull RadioButton rbActionDiscoveryFinished, @NonNull RadioButton rbActionStateChanged,
      @NonNull RadioButton rbDiscovered, @NonNull RadioButton rbStateOff,
      @NonNull RadioButton rbStateOn, @NonNull RadioButton rbUndiscovered,
      @NonNull RecyclerView recyclerDevices, @NonNull RadioGroup rgBluetoothAction,
      @NonNull RadioGroup rgBluetoothState, @NonNull RadioGroup rgDiscoveryResult,
      @NonNull TextView tvDescription) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnStartDiscovery = btnStartDiscovery;
    this.etDeviceAddress = etDeviceAddress;
    this.layoutBluetoothState = layoutBluetoothState;
    this.layoutDeviceAddress = layoutDeviceAddress;
    this.layoutDiscoveryFinished = layoutDiscoveryFinished;
    this.rbActionAclConnected = rbActionAclConnected;
    this.rbActionAclDisconnected = rbActionAclDisconnected;
    this.rbActionDiscoveryFinished = rbActionDiscoveryFinished;
    this.rbActionStateChanged = rbActionStateChanged;
    this.rbDiscovered = rbDiscovered;
    this.rbStateOff = rbStateOff;
    this.rbStateOn = rbStateOn;
    this.rbUndiscovered = rbUndiscovered;
    this.recyclerDevices = recyclerDevices;
    this.rgBluetoothAction = rgBluetoothAction;
    this.rgBluetoothState = rgBluetoothState;
    this.rgDiscoveryResult = rgDiscoveryResult;
    this.tvDescription = tvDescription;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTasksConditionBluetoothBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTasksConditionBluetoothBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tasks_condition_bluetooth, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTasksConditionBluetoothBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_start_discovery;
      RippleShadowShadowButton btnStartDiscovery = ViewBindings.findChildViewById(rootView, id);
      if (btnStartDiscovery == null) {
        break missingId;
      }

      id = R.id.et_device_address;
      MaterialEditText etDeviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (etDeviceAddress == null) {
        break missingId;
      }

      id = R.id.layout_bluetooth_state;
      LinearLayout layoutBluetoothState = ViewBindings.findChildViewById(rootView, id);
      if (layoutBluetoothState == null) {
        break missingId;
      }

      id = R.id.layout_device_address;
      LinearLayout layoutDeviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (layoutDeviceAddress == null) {
        break missingId;
      }

      id = R.id.layout_discovery_finished;
      LinearLayout layoutDiscoveryFinished = ViewBindings.findChildViewById(rootView, id);
      if (layoutDiscoveryFinished == null) {
        break missingId;
      }

      id = R.id.rb_action_acl_connected;
      RadioButton rbActionAclConnected = ViewBindings.findChildViewById(rootView, id);
      if (rbActionAclConnected == null) {
        break missingId;
      }

      id = R.id.rb_action_acl_disconnected;
      RadioButton rbActionAclDisconnected = ViewBindings.findChildViewById(rootView, id);
      if (rbActionAclDisconnected == null) {
        break missingId;
      }

      id = R.id.rb_action_discovery_finished;
      RadioButton rbActionDiscoveryFinished = ViewBindings.findChildViewById(rootView, id);
      if (rbActionDiscoveryFinished == null) {
        break missingId;
      }

      id = R.id.rb_action_state_changed;
      RadioButton rbActionStateChanged = ViewBindings.findChildViewById(rootView, id);
      if (rbActionStateChanged == null) {
        break missingId;
      }

      id = R.id.rb_discovered;
      RadioButton rbDiscovered = ViewBindings.findChildViewById(rootView, id);
      if (rbDiscovered == null) {
        break missingId;
      }

      id = R.id.rb_state_off;
      RadioButton rbStateOff = ViewBindings.findChildViewById(rootView, id);
      if (rbStateOff == null) {
        break missingId;
      }

      id = R.id.rb_state_on;
      RadioButton rbStateOn = ViewBindings.findChildViewById(rootView, id);
      if (rbStateOn == null) {
        break missingId;
      }

      id = R.id.rb_undiscovered;
      RadioButton rbUndiscovered = ViewBindings.findChildViewById(rootView, id);
      if (rbUndiscovered == null) {
        break missingId;
      }

      id = R.id.recycler_devices;
      RecyclerView recyclerDevices = ViewBindings.findChildViewById(rootView, id);
      if (recyclerDevices == null) {
        break missingId;
      }

      id = R.id.rg_bluetooth_action;
      RadioGroup rgBluetoothAction = ViewBindings.findChildViewById(rootView, id);
      if (rgBluetoothAction == null) {
        break missingId;
      }

      id = R.id.rg_bluetooth_state;
      RadioGroup rgBluetoothState = ViewBindings.findChildViewById(rootView, id);
      if (rgBluetoothState == null) {
        break missingId;
      }

      id = R.id.rg_discovery_result;
      RadioGroup rgDiscoveryResult = ViewBindings.findChildViewById(rootView, id);
      if (rgDiscoveryResult == null) {
        break missingId;
      }

      id = R.id.tv_description;
      TextView tvDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvDescription == null) {
        break missingId;
      }

      return new FragmentTasksConditionBluetoothBinding((LinearLayout) rootView, btnDel, btnSave,
          btnStartDiscovery, etDeviceAddress, layoutBluetoothState, layoutDeviceAddress,
          layoutDiscoveryFinished, rbActionAclConnected, rbActionAclDisconnected,
          rbActionDiscoveryFinished, rbActionStateChanged, rbDiscovered, rbStateOff, rbStateOn,
          rbUndiscovered, recyclerDevices, rgBluetoothAction, rgBluetoothState, rgDiscoveryResult,
          tvDescription);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
