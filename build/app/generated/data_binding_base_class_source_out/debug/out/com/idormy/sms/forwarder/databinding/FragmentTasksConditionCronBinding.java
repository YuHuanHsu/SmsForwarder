// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.flowlayout.FlowTagLayout;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTasksConditionCronBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final EditText etDay;

  @NonNull
  public final EditText etDayCyclicFrom;

  @NonNull
  public final EditText etDayCyclicTo;

  @NonNull
  public final EditText etDayInterval;

  @NonNull
  public final EditText etDayIntervalStart;

  @NonNull
  public final EditText etHour;

  @NonNull
  public final EditText etHourCyclicFrom;

  @NonNull
  public final EditText etHourCyclicTo;

  @NonNull
  public final EditText etHourInterval;

  @NonNull
  public final EditText etHourIntervalStart;

  @NonNull
  public final EditText etLastWeekOfMonth;

  @NonNull
  public final EditText etMinute;

  @NonNull
  public final EditText etMinuteCyclicFrom;

  @NonNull
  public final EditText etMinuteCyclicTo;

  @NonNull
  public final EditText etMinuteInterval;

  @NonNull
  public final EditText etMinuteIntervalStart;

  @NonNull
  public final EditText etMonth;

  @NonNull
  public final EditText etMonthCyclicFrom;

  @NonNull
  public final EditText etMonthCyclicTo;

  @NonNull
  public final EditText etMonthInterval;

  @NonNull
  public final EditText etMonthIntervalStart;

  @NonNull
  public final EditText etRecentDay;

  @NonNull
  public final EditText etSecond;

  @NonNull
  public final EditText etSecondCyclicFrom;

  @NonNull
  public final EditText etSecondCyclicTo;

  @NonNull
  public final EditText etSecondInterval;

  @NonNull
  public final EditText etSecondIntervalStart;

  @NonNull
  public final EditText etWeek;

  @NonNull
  public final EditText etWeekCyclicFrom;

  @NonNull
  public final EditText etWeekCyclicTo;

  @NonNull
  public final EditText etWhichDayOfWeek;

  @NonNull
  public final EditText etWhichWeekOfMonth;

  @NonNull
  public final EditText etYear;

  @NonNull
  public final EditText etYearCyclicFrom;

  @NonNull
  public final EditText etYearCyclicTo;

  @NonNull
  public final EditText etYearInterval;

  @NonNull
  public final EditText etYearIntervalStart;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectDay;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectHour;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectMinute;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectMonth;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectSecond;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectWeek;

  @NonNull
  public final FlowTagLayout flowlayoutMultiSelectYear;

  @NonNull
  public final LinearLayout layoutCronExpressionCheck;

  @NonNull
  public final LinearLayout layoutDayType;

  @NonNull
  public final LinearLayout layoutHourType;

  @NonNull
  public final LinearLayout layoutMinuteType;

  @NonNull
  public final LinearLayout layoutMonthType;

  @NonNull
  public final LinearLayout layoutSecondType;

  @NonNull
  public final LinearLayout layoutWeekType;

  @NonNull
  public final LinearLayout layoutYearType;

  @NonNull
  public final RadioButton rbDayTypeAll;

  @NonNull
  public final RadioButton rbDayTypeAssigned;

  @NonNull
  public final RadioButton rbDayTypeCyclic;

  @NonNull
  public final RadioButton rbDayTypeInterval;

  @NonNull
  public final RadioButton rbDayTypeLastDayOfMonth;

  @NonNull
  public final RadioButton rbDayTypeLastDayOfMonthRecentDay;

  @NonNull
  public final RadioButton rbDayTypeNotAssigned;

  @NonNull
  public final RadioButton rbDayTypeRecentDay;

  @NonNull
  public final RadioButton rbHourTypeAll;

  @NonNull
  public final RadioButton rbHourTypeAssigned;

  @NonNull
  public final RadioButton rbHourTypeCyclic;

  @NonNull
  public final RadioButton rbHourTypeInterval;

  @NonNull
  public final RadioButton rbMinuteTypeAll;

  @NonNull
  public final RadioButton rbMinuteTypeAssigned;

  @NonNull
  public final RadioButton rbMinuteTypeCyclic;

  @NonNull
  public final RadioButton rbMinuteTypeInterval;

  @NonNull
  public final RadioButton rbMonthTypeAll;

  @NonNull
  public final RadioButton rbMonthTypeAssigned;

  @NonNull
  public final RadioButton rbMonthTypeCyclic;

  @NonNull
  public final RadioButton rbMonthTypeInterval;

  @NonNull
  public final RadioButton rbSecondTypeAll;

  @NonNull
  public final RadioButton rbSecondTypeAssigned;

  @NonNull
  public final RadioButton rbSecondTypeCyclic;

  @NonNull
  public final RadioButton rbSecondTypeInterval;

  @NonNull
  public final RadioButton rbWeekTypeAll;

  @NonNull
  public final RadioButton rbWeekTypeAssigned;

  @NonNull
  public final RadioButton rbWeekTypeCyclic;

  @NonNull
  public final RadioButton rbWeekTypeLastWeekOfMonth;

  @NonNull
  public final RadioButton rbWeekTypeNotAssigned;

  @NonNull
  public final RadioButton rbWeekTypeWeeksOfWeek;

  @NonNull
  public final RadioButton rbYearTypeAll;

  @NonNull
  public final RadioButton rbYearTypeAssigned;

  @NonNull
  public final RadioButton rbYearTypeCyclic;

  @NonNull
  public final RadioButton rbYearTypeInterval;

  @NonNull
  public final RadioButton rbYearTypeNotAssigned;

  @NonNull
  public final RadioGroup rgDayType;

  @NonNull
  public final RadioGroup rgHourType;

  @NonNull
  public final RadioGroup rgMinuteType;

  @NonNull
  public final RadioGroup rgMonthType;

  @NonNull
  public final RadioGroup rgSecondType;

  @NonNull
  public final RadioGroup rgWeekType;

  @NonNull
  public final RadioGroup rgYearType;

  @NonNull
  public final View separatorCronExpressionCheck;

  @NonNull
  public final TextView tvCronExpressionCheckTips;

  @NonNull
  public final TextView tvDescription;

  @NonNull
  public final TextView tvNextTimeList;

  private FragmentTasksConditionCronBinding(@NonNull LinearLayout rootView,
      @NonNull SuperButton btnDel, @NonNull SuperButton btnSave, @NonNull SuperButton btnTest,
      @NonNull EditText etDay, @NonNull EditText etDayCyclicFrom, @NonNull EditText etDayCyclicTo,
      @NonNull EditText etDayInterval, @NonNull EditText etDayIntervalStart,
      @NonNull EditText etHour, @NonNull EditText etHourCyclicFrom,
      @NonNull EditText etHourCyclicTo, @NonNull EditText etHourInterval,
      @NonNull EditText etHourIntervalStart, @NonNull EditText etLastWeekOfMonth,
      @NonNull EditText etMinute, @NonNull EditText etMinuteCyclicFrom,
      @NonNull EditText etMinuteCyclicTo, @NonNull EditText etMinuteInterval,
      @NonNull EditText etMinuteIntervalStart, @NonNull EditText etMonth,
      @NonNull EditText etMonthCyclicFrom, @NonNull EditText etMonthCyclicTo,
      @NonNull EditText etMonthInterval, @NonNull EditText etMonthIntervalStart,
      @NonNull EditText etRecentDay, @NonNull EditText etSecond,
      @NonNull EditText etSecondCyclicFrom, @NonNull EditText etSecondCyclicTo,
      @NonNull EditText etSecondInterval, @NonNull EditText etSecondIntervalStart,
      @NonNull EditText etWeek, @NonNull EditText etWeekCyclicFrom,
      @NonNull EditText etWeekCyclicTo, @NonNull EditText etWhichDayOfWeek,
      @NonNull EditText etWhichWeekOfMonth, @NonNull EditText etYear,
      @NonNull EditText etYearCyclicFrom, @NonNull EditText etYearCyclicTo,
      @NonNull EditText etYearInterval, @NonNull EditText etYearIntervalStart,
      @NonNull FlowTagLayout flowlayoutMultiSelectDay,
      @NonNull FlowTagLayout flowlayoutMultiSelectHour,
      @NonNull FlowTagLayout flowlayoutMultiSelectMinute,
      @NonNull FlowTagLayout flowlayoutMultiSelectMonth,
      @NonNull FlowTagLayout flowlayoutMultiSelectSecond,
      @NonNull FlowTagLayout flowlayoutMultiSelectWeek,
      @NonNull FlowTagLayout flowlayoutMultiSelectYear,
      @NonNull LinearLayout layoutCronExpressionCheck, @NonNull LinearLayout layoutDayType,
      @NonNull LinearLayout layoutHourType, @NonNull LinearLayout layoutMinuteType,
      @NonNull LinearLayout layoutMonthType, @NonNull LinearLayout layoutSecondType,
      @NonNull LinearLayout layoutWeekType, @NonNull LinearLayout layoutYearType,
      @NonNull RadioButton rbDayTypeAll, @NonNull RadioButton rbDayTypeAssigned,
      @NonNull RadioButton rbDayTypeCyclic, @NonNull RadioButton rbDayTypeInterval,
      @NonNull RadioButton rbDayTypeLastDayOfMonth,
      @NonNull RadioButton rbDayTypeLastDayOfMonthRecentDay,
      @NonNull RadioButton rbDayTypeNotAssigned, @NonNull RadioButton rbDayTypeRecentDay,
      @NonNull RadioButton rbHourTypeAll, @NonNull RadioButton rbHourTypeAssigned,
      @NonNull RadioButton rbHourTypeCyclic, @NonNull RadioButton rbHourTypeInterval,
      @NonNull RadioButton rbMinuteTypeAll, @NonNull RadioButton rbMinuteTypeAssigned,
      @NonNull RadioButton rbMinuteTypeCyclic, @NonNull RadioButton rbMinuteTypeInterval,
      @NonNull RadioButton rbMonthTypeAll, @NonNull RadioButton rbMonthTypeAssigned,
      @NonNull RadioButton rbMonthTypeCyclic, @NonNull RadioButton rbMonthTypeInterval,
      @NonNull RadioButton rbSecondTypeAll, @NonNull RadioButton rbSecondTypeAssigned,
      @NonNull RadioButton rbSecondTypeCyclic, @NonNull RadioButton rbSecondTypeInterval,
      @NonNull RadioButton rbWeekTypeAll, @NonNull RadioButton rbWeekTypeAssigned,
      @NonNull RadioButton rbWeekTypeCyclic, @NonNull RadioButton rbWeekTypeLastWeekOfMonth,
      @NonNull RadioButton rbWeekTypeNotAssigned, @NonNull RadioButton rbWeekTypeWeeksOfWeek,
      @NonNull RadioButton rbYearTypeAll, @NonNull RadioButton rbYearTypeAssigned,
      @NonNull RadioButton rbYearTypeCyclic, @NonNull RadioButton rbYearTypeInterval,
      @NonNull RadioButton rbYearTypeNotAssigned, @NonNull RadioGroup rgDayType,
      @NonNull RadioGroup rgHourType, @NonNull RadioGroup rgMinuteType,
      @NonNull RadioGroup rgMonthType, @NonNull RadioGroup rgSecondType,
      @NonNull RadioGroup rgWeekType, @NonNull RadioGroup rgYearType,
      @NonNull View separatorCronExpressionCheck, @NonNull TextView tvCronExpressionCheckTips,
      @NonNull TextView tvDescription, @NonNull TextView tvNextTimeList) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnTest = btnTest;
    this.etDay = etDay;
    this.etDayCyclicFrom = etDayCyclicFrom;
    this.etDayCyclicTo = etDayCyclicTo;
    this.etDayInterval = etDayInterval;
    this.etDayIntervalStart = etDayIntervalStart;
    this.etHour = etHour;
    this.etHourCyclicFrom = etHourCyclicFrom;
    this.etHourCyclicTo = etHourCyclicTo;
    this.etHourInterval = etHourInterval;
    this.etHourIntervalStart = etHourIntervalStart;
    this.etLastWeekOfMonth = etLastWeekOfMonth;
    this.etMinute = etMinute;
    this.etMinuteCyclicFrom = etMinuteCyclicFrom;
    this.etMinuteCyclicTo = etMinuteCyclicTo;
    this.etMinuteInterval = etMinuteInterval;
    this.etMinuteIntervalStart = etMinuteIntervalStart;
    this.etMonth = etMonth;
    this.etMonthCyclicFrom = etMonthCyclicFrom;
    this.etMonthCyclicTo = etMonthCyclicTo;
    this.etMonthInterval = etMonthInterval;
    this.etMonthIntervalStart = etMonthIntervalStart;
    this.etRecentDay = etRecentDay;
    this.etSecond = etSecond;
    this.etSecondCyclicFrom = etSecondCyclicFrom;
    this.etSecondCyclicTo = etSecondCyclicTo;
    this.etSecondInterval = etSecondInterval;
    this.etSecondIntervalStart = etSecondIntervalStart;
    this.etWeek = etWeek;
    this.etWeekCyclicFrom = etWeekCyclicFrom;
    this.etWeekCyclicTo = etWeekCyclicTo;
    this.etWhichDayOfWeek = etWhichDayOfWeek;
    this.etWhichWeekOfMonth = etWhichWeekOfMonth;
    this.etYear = etYear;
    this.etYearCyclicFrom = etYearCyclicFrom;
    this.etYearCyclicTo = etYearCyclicTo;
    this.etYearInterval = etYearInterval;
    this.etYearIntervalStart = etYearIntervalStart;
    this.flowlayoutMultiSelectDay = flowlayoutMultiSelectDay;
    this.flowlayoutMultiSelectHour = flowlayoutMultiSelectHour;
    this.flowlayoutMultiSelectMinute = flowlayoutMultiSelectMinute;
    this.flowlayoutMultiSelectMonth = flowlayoutMultiSelectMonth;
    this.flowlayoutMultiSelectSecond = flowlayoutMultiSelectSecond;
    this.flowlayoutMultiSelectWeek = flowlayoutMultiSelectWeek;
    this.flowlayoutMultiSelectYear = flowlayoutMultiSelectYear;
    this.layoutCronExpressionCheck = layoutCronExpressionCheck;
    this.layoutDayType = layoutDayType;
    this.layoutHourType = layoutHourType;
    this.layoutMinuteType = layoutMinuteType;
    this.layoutMonthType = layoutMonthType;
    this.layoutSecondType = layoutSecondType;
    this.layoutWeekType = layoutWeekType;
    this.layoutYearType = layoutYearType;
    this.rbDayTypeAll = rbDayTypeAll;
    this.rbDayTypeAssigned = rbDayTypeAssigned;
    this.rbDayTypeCyclic = rbDayTypeCyclic;
    this.rbDayTypeInterval = rbDayTypeInterval;
    this.rbDayTypeLastDayOfMonth = rbDayTypeLastDayOfMonth;
    this.rbDayTypeLastDayOfMonthRecentDay = rbDayTypeLastDayOfMonthRecentDay;
    this.rbDayTypeNotAssigned = rbDayTypeNotAssigned;
    this.rbDayTypeRecentDay = rbDayTypeRecentDay;
    this.rbHourTypeAll = rbHourTypeAll;
    this.rbHourTypeAssigned = rbHourTypeAssigned;
    this.rbHourTypeCyclic = rbHourTypeCyclic;
    this.rbHourTypeInterval = rbHourTypeInterval;
    this.rbMinuteTypeAll = rbMinuteTypeAll;
    this.rbMinuteTypeAssigned = rbMinuteTypeAssigned;
    this.rbMinuteTypeCyclic = rbMinuteTypeCyclic;
    this.rbMinuteTypeInterval = rbMinuteTypeInterval;
    this.rbMonthTypeAll = rbMonthTypeAll;
    this.rbMonthTypeAssigned = rbMonthTypeAssigned;
    this.rbMonthTypeCyclic = rbMonthTypeCyclic;
    this.rbMonthTypeInterval = rbMonthTypeInterval;
    this.rbSecondTypeAll = rbSecondTypeAll;
    this.rbSecondTypeAssigned = rbSecondTypeAssigned;
    this.rbSecondTypeCyclic = rbSecondTypeCyclic;
    this.rbSecondTypeInterval = rbSecondTypeInterval;
    this.rbWeekTypeAll = rbWeekTypeAll;
    this.rbWeekTypeAssigned = rbWeekTypeAssigned;
    this.rbWeekTypeCyclic = rbWeekTypeCyclic;
    this.rbWeekTypeLastWeekOfMonth = rbWeekTypeLastWeekOfMonth;
    this.rbWeekTypeNotAssigned = rbWeekTypeNotAssigned;
    this.rbWeekTypeWeeksOfWeek = rbWeekTypeWeeksOfWeek;
    this.rbYearTypeAll = rbYearTypeAll;
    this.rbYearTypeAssigned = rbYearTypeAssigned;
    this.rbYearTypeCyclic = rbYearTypeCyclic;
    this.rbYearTypeInterval = rbYearTypeInterval;
    this.rbYearTypeNotAssigned = rbYearTypeNotAssigned;
    this.rgDayType = rgDayType;
    this.rgHourType = rgHourType;
    this.rgMinuteType = rgMinuteType;
    this.rgMonthType = rgMonthType;
    this.rgSecondType = rgSecondType;
    this.rgWeekType = rgWeekType;
    this.rgYearType = rgYearType;
    this.separatorCronExpressionCheck = separatorCronExpressionCheck;
    this.tvCronExpressionCheckTips = tvCronExpressionCheckTips;
    this.tvDescription = tvDescription;
    this.tvNextTimeList = tvNextTimeList;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTasksConditionCronBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTasksConditionCronBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tasks_condition_cron, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTasksConditionCronBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_day;
      EditText etDay = ViewBindings.findChildViewById(rootView, id);
      if (etDay == null) {
        break missingId;
      }

      id = R.id.et_day_cyclic_from;
      EditText etDayCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etDayCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_day_cyclic_to;
      EditText etDayCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etDayCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_day_interval;
      EditText etDayInterval = ViewBindings.findChildViewById(rootView, id);
      if (etDayInterval == null) {
        break missingId;
      }

      id = R.id.et_day_interval_start;
      EditText etDayIntervalStart = ViewBindings.findChildViewById(rootView, id);
      if (etDayIntervalStart == null) {
        break missingId;
      }

      id = R.id.et_hour;
      EditText etHour = ViewBindings.findChildViewById(rootView, id);
      if (etHour == null) {
        break missingId;
      }

      id = R.id.et_hour_cyclic_from;
      EditText etHourCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etHourCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_hour_cyclic_to;
      EditText etHourCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etHourCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_hour_interval;
      EditText etHourInterval = ViewBindings.findChildViewById(rootView, id);
      if (etHourInterval == null) {
        break missingId;
      }

      id = R.id.et_hour_interval_start;
      EditText etHourIntervalStart = ViewBindings.findChildViewById(rootView, id);
      if (etHourIntervalStart == null) {
        break missingId;
      }

      id = R.id.et_last_week_of_month;
      EditText etLastWeekOfMonth = ViewBindings.findChildViewById(rootView, id);
      if (etLastWeekOfMonth == null) {
        break missingId;
      }

      id = R.id.et_minute;
      EditText etMinute = ViewBindings.findChildViewById(rootView, id);
      if (etMinute == null) {
        break missingId;
      }

      id = R.id.et_minute_cyclic_from;
      EditText etMinuteCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etMinuteCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_minute_cyclic_to;
      EditText etMinuteCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etMinuteCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_minute_interval;
      EditText etMinuteInterval = ViewBindings.findChildViewById(rootView, id);
      if (etMinuteInterval == null) {
        break missingId;
      }

      id = R.id.et_minute_interval_start;
      EditText etMinuteIntervalStart = ViewBindings.findChildViewById(rootView, id);
      if (etMinuteIntervalStart == null) {
        break missingId;
      }

      id = R.id.et_month;
      EditText etMonth = ViewBindings.findChildViewById(rootView, id);
      if (etMonth == null) {
        break missingId;
      }

      id = R.id.et_month_cyclic_from;
      EditText etMonthCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etMonthCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_month_cyclic_to;
      EditText etMonthCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etMonthCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_month_interval;
      EditText etMonthInterval = ViewBindings.findChildViewById(rootView, id);
      if (etMonthInterval == null) {
        break missingId;
      }

      id = R.id.et_month_interval_start;
      EditText etMonthIntervalStart = ViewBindings.findChildViewById(rootView, id);
      if (etMonthIntervalStart == null) {
        break missingId;
      }

      id = R.id.et_recent_day;
      EditText etRecentDay = ViewBindings.findChildViewById(rootView, id);
      if (etRecentDay == null) {
        break missingId;
      }

      id = R.id.et_second;
      EditText etSecond = ViewBindings.findChildViewById(rootView, id);
      if (etSecond == null) {
        break missingId;
      }

      id = R.id.et_second_cyclic_from;
      EditText etSecondCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etSecondCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_second_cyclic_to;
      EditText etSecondCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etSecondCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_second_interval;
      EditText etSecondInterval = ViewBindings.findChildViewById(rootView, id);
      if (etSecondInterval == null) {
        break missingId;
      }

      id = R.id.et_second_interval_start;
      EditText etSecondIntervalStart = ViewBindings.findChildViewById(rootView, id);
      if (etSecondIntervalStart == null) {
        break missingId;
      }

      id = R.id.et_week;
      EditText etWeek = ViewBindings.findChildViewById(rootView, id);
      if (etWeek == null) {
        break missingId;
      }

      id = R.id.et_week_cyclic_from;
      EditText etWeekCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etWeekCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_week_cyclic_to;
      EditText etWeekCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etWeekCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_which_day_of_week;
      EditText etWhichDayOfWeek = ViewBindings.findChildViewById(rootView, id);
      if (etWhichDayOfWeek == null) {
        break missingId;
      }

      id = R.id.et_which_week_of_month;
      EditText etWhichWeekOfMonth = ViewBindings.findChildViewById(rootView, id);
      if (etWhichWeekOfMonth == null) {
        break missingId;
      }

      id = R.id.et_year;
      EditText etYear = ViewBindings.findChildViewById(rootView, id);
      if (etYear == null) {
        break missingId;
      }

      id = R.id.et_year_cyclic_from;
      EditText etYearCyclicFrom = ViewBindings.findChildViewById(rootView, id);
      if (etYearCyclicFrom == null) {
        break missingId;
      }

      id = R.id.et_year_cyclic_to;
      EditText etYearCyclicTo = ViewBindings.findChildViewById(rootView, id);
      if (etYearCyclicTo == null) {
        break missingId;
      }

      id = R.id.et_year_interval;
      EditText etYearInterval = ViewBindings.findChildViewById(rootView, id);
      if (etYearInterval == null) {
        break missingId;
      }

      id = R.id.et_year_interval_start;
      EditText etYearIntervalStart = ViewBindings.findChildViewById(rootView, id);
      if (etYearIntervalStart == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_day;
      FlowTagLayout flowlayoutMultiSelectDay = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectDay == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_hour;
      FlowTagLayout flowlayoutMultiSelectHour = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectHour == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_minute;
      FlowTagLayout flowlayoutMultiSelectMinute = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectMinute == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_month;
      FlowTagLayout flowlayoutMultiSelectMonth = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectMonth == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_second;
      FlowTagLayout flowlayoutMultiSelectSecond = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectSecond == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_week;
      FlowTagLayout flowlayoutMultiSelectWeek = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectWeek == null) {
        break missingId;
      }

      id = R.id.flowlayout_multi_select_year;
      FlowTagLayout flowlayoutMultiSelectYear = ViewBindings.findChildViewById(rootView, id);
      if (flowlayoutMultiSelectYear == null) {
        break missingId;
      }

      id = R.id.layout_cron_expression_check;
      LinearLayout layoutCronExpressionCheck = ViewBindings.findChildViewById(rootView, id);
      if (layoutCronExpressionCheck == null) {
        break missingId;
      }

      id = R.id.layout_day_type;
      LinearLayout layoutDayType = ViewBindings.findChildViewById(rootView, id);
      if (layoutDayType == null) {
        break missingId;
      }

      id = R.id.layout_hour_type;
      LinearLayout layoutHourType = ViewBindings.findChildViewById(rootView, id);
      if (layoutHourType == null) {
        break missingId;
      }

      id = R.id.layout_minute_type;
      LinearLayout layoutMinuteType = ViewBindings.findChildViewById(rootView, id);
      if (layoutMinuteType == null) {
        break missingId;
      }

      id = R.id.layout_month_type;
      LinearLayout layoutMonthType = ViewBindings.findChildViewById(rootView, id);
      if (layoutMonthType == null) {
        break missingId;
      }

      id = R.id.layout_second_type;
      LinearLayout layoutSecondType = ViewBindings.findChildViewById(rootView, id);
      if (layoutSecondType == null) {
        break missingId;
      }

      id = R.id.layout_week_type;
      LinearLayout layoutWeekType = ViewBindings.findChildViewById(rootView, id);
      if (layoutWeekType == null) {
        break missingId;
      }

      id = R.id.layout_year_type;
      LinearLayout layoutYearType = ViewBindings.findChildViewById(rootView, id);
      if (layoutYearType == null) {
        break missingId;
      }

      id = R.id.rb_day_type_all;
      RadioButton rbDayTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_day_type_assigned;
      RadioButton rbDayTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_day_type_cyclic;
      RadioButton rbDayTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_day_type_interval;
      RadioButton rbDayTypeInterval = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeInterval == null) {
        break missingId;
      }

      id = R.id.rb_day_type_last_day_of_month;
      RadioButton rbDayTypeLastDayOfMonth = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeLastDayOfMonth == null) {
        break missingId;
      }

      id = R.id.rb_day_type_last_day_of_month_recent_day;
      RadioButton rbDayTypeLastDayOfMonthRecentDay = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeLastDayOfMonthRecentDay == null) {
        break missingId;
      }

      id = R.id.rb_day_type_not_assigned;
      RadioButton rbDayTypeNotAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeNotAssigned == null) {
        break missingId;
      }

      id = R.id.rb_day_type_recent_day;
      RadioButton rbDayTypeRecentDay = ViewBindings.findChildViewById(rootView, id);
      if (rbDayTypeRecentDay == null) {
        break missingId;
      }

      id = R.id.rb_hour_type_all;
      RadioButton rbHourTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbHourTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_hour_type_assigned;
      RadioButton rbHourTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbHourTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_hour_type_cyclic;
      RadioButton rbHourTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbHourTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_hour_type_interval;
      RadioButton rbHourTypeInterval = ViewBindings.findChildViewById(rootView, id);
      if (rbHourTypeInterval == null) {
        break missingId;
      }

      id = R.id.rb_minute_type_all;
      RadioButton rbMinuteTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbMinuteTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_minute_type_assigned;
      RadioButton rbMinuteTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbMinuteTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_minute_type_cyclic;
      RadioButton rbMinuteTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbMinuteTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_minute_type_interval;
      RadioButton rbMinuteTypeInterval = ViewBindings.findChildViewById(rootView, id);
      if (rbMinuteTypeInterval == null) {
        break missingId;
      }

      id = R.id.rb_month_type_all;
      RadioButton rbMonthTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbMonthTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_month_type_assigned;
      RadioButton rbMonthTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbMonthTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_month_type_cyclic;
      RadioButton rbMonthTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbMonthTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_month_type_interval;
      RadioButton rbMonthTypeInterval = ViewBindings.findChildViewById(rootView, id);
      if (rbMonthTypeInterval == null) {
        break missingId;
      }

      id = R.id.rb_second_type_all;
      RadioButton rbSecondTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbSecondTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_second_type_assigned;
      RadioButton rbSecondTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbSecondTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_second_type_cyclic;
      RadioButton rbSecondTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbSecondTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_second_type_interval;
      RadioButton rbSecondTypeInterval = ViewBindings.findChildViewById(rootView, id);
      if (rbSecondTypeInterval == null) {
        break missingId;
      }

      id = R.id.rb_week_type_all;
      RadioButton rbWeekTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbWeekTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_week_type_assigned;
      RadioButton rbWeekTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbWeekTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_week_type_cyclic;
      RadioButton rbWeekTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbWeekTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_week_type_last_week_of_month;
      RadioButton rbWeekTypeLastWeekOfMonth = ViewBindings.findChildViewById(rootView, id);
      if (rbWeekTypeLastWeekOfMonth == null) {
        break missingId;
      }

      id = R.id.rb_week_type_not_assigned;
      RadioButton rbWeekTypeNotAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbWeekTypeNotAssigned == null) {
        break missingId;
      }

      id = R.id.rb_week_type_weeks_of_week;
      RadioButton rbWeekTypeWeeksOfWeek = ViewBindings.findChildViewById(rootView, id);
      if (rbWeekTypeWeeksOfWeek == null) {
        break missingId;
      }

      id = R.id.rb_year_type_all;
      RadioButton rbYearTypeAll = ViewBindings.findChildViewById(rootView, id);
      if (rbYearTypeAll == null) {
        break missingId;
      }

      id = R.id.rb_year_type_assigned;
      RadioButton rbYearTypeAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbYearTypeAssigned == null) {
        break missingId;
      }

      id = R.id.rb_year_type_cyclic;
      RadioButton rbYearTypeCyclic = ViewBindings.findChildViewById(rootView, id);
      if (rbYearTypeCyclic == null) {
        break missingId;
      }

      id = R.id.rb_year_type_interval;
      RadioButton rbYearTypeInterval = ViewBindings.findChildViewById(rootView, id);
      if (rbYearTypeInterval == null) {
        break missingId;
      }

      id = R.id.rb_year_type_not_assigned;
      RadioButton rbYearTypeNotAssigned = ViewBindings.findChildViewById(rootView, id);
      if (rbYearTypeNotAssigned == null) {
        break missingId;
      }

      id = R.id.rg_day_type;
      RadioGroup rgDayType = ViewBindings.findChildViewById(rootView, id);
      if (rgDayType == null) {
        break missingId;
      }

      id = R.id.rg_hour_type;
      RadioGroup rgHourType = ViewBindings.findChildViewById(rootView, id);
      if (rgHourType == null) {
        break missingId;
      }

      id = R.id.rg_minute_type;
      RadioGroup rgMinuteType = ViewBindings.findChildViewById(rootView, id);
      if (rgMinuteType == null) {
        break missingId;
      }

      id = R.id.rg_month_type;
      RadioGroup rgMonthType = ViewBindings.findChildViewById(rootView, id);
      if (rgMonthType == null) {
        break missingId;
      }

      id = R.id.rg_second_type;
      RadioGroup rgSecondType = ViewBindings.findChildViewById(rootView, id);
      if (rgSecondType == null) {
        break missingId;
      }

      id = R.id.rg_week_type;
      RadioGroup rgWeekType = ViewBindings.findChildViewById(rootView, id);
      if (rgWeekType == null) {
        break missingId;
      }

      id = R.id.rg_year_type;
      RadioGroup rgYearType = ViewBindings.findChildViewById(rootView, id);
      if (rgYearType == null) {
        break missingId;
      }

      id = R.id.separator_cron_expression_check;
      View separatorCronExpressionCheck = ViewBindings.findChildViewById(rootView, id);
      if (separatorCronExpressionCheck == null) {
        break missingId;
      }

      id = R.id.tv_cron_expression_check_tips;
      TextView tvCronExpressionCheckTips = ViewBindings.findChildViewById(rootView, id);
      if (tvCronExpressionCheckTips == null) {
        break missingId;
      }

      id = R.id.tv_description;
      TextView tvDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvDescription == null) {
        break missingId;
      }

      id = R.id.tv_next_time_list;
      TextView tvNextTimeList = ViewBindings.findChildViewById(rootView, id);
      if (tvNextTimeList == null) {
        break missingId;
      }

      return new FragmentTasksConditionCronBinding((LinearLayout) rootView, btnDel, btnSave,
          btnTest, etDay, etDayCyclicFrom, etDayCyclicTo, etDayInterval, etDayIntervalStart, etHour,
          etHourCyclicFrom, etHourCyclicTo, etHourInterval, etHourIntervalStart, etLastWeekOfMonth,
          etMinute, etMinuteCyclicFrom, etMinuteCyclicTo, etMinuteInterval, etMinuteIntervalStart,
          etMonth, etMonthCyclicFrom, etMonthCyclicTo, etMonthInterval, etMonthIntervalStart,
          etRecentDay, etSecond, etSecondCyclicFrom, etSecondCyclicTo, etSecondInterval,
          etSecondIntervalStart, etWeek, etWeekCyclicFrom, etWeekCyclicTo, etWhichDayOfWeek,
          etWhichWeekOfMonth, etYear, etYearCyclicFrom, etYearCyclicTo, etYearInterval,
          etYearIntervalStart, flowlayoutMultiSelectDay, flowlayoutMultiSelectHour,
          flowlayoutMultiSelectMinute, flowlayoutMultiSelectMonth, flowlayoutMultiSelectSecond,
          flowlayoutMultiSelectWeek, flowlayoutMultiSelectYear, layoutCronExpressionCheck,
          layoutDayType, layoutHourType, layoutMinuteType, layoutMonthType, layoutSecondType,
          layoutWeekType, layoutYearType, rbDayTypeAll, rbDayTypeAssigned, rbDayTypeCyclic,
          rbDayTypeInterval, rbDayTypeLastDayOfMonth, rbDayTypeLastDayOfMonthRecentDay,
          rbDayTypeNotAssigned, rbDayTypeRecentDay, rbHourTypeAll, rbHourTypeAssigned,
          rbHourTypeCyclic, rbHourTypeInterval, rbMinuteTypeAll, rbMinuteTypeAssigned,
          rbMinuteTypeCyclic, rbMinuteTypeInterval, rbMonthTypeAll, rbMonthTypeAssigned,
          rbMonthTypeCyclic, rbMonthTypeInterval, rbSecondTypeAll, rbSecondTypeAssigned,
          rbSecondTypeCyclic, rbSecondTypeInterval, rbWeekTypeAll, rbWeekTypeAssigned,
          rbWeekTypeCyclic, rbWeekTypeLastWeekOfMonth, rbWeekTypeNotAssigned, rbWeekTypeWeeksOfWeek,
          rbYearTypeAll, rbYearTypeAssigned, rbYearTypeCyclic, rbYearTypeInterval,
          rbYearTypeNotAssigned, rgDayType, rgHourType, rgMinuteType, rgMonthType, rgSecondType,
          rgWeekType, rgYearType, separatorCronExpressionCheck, tvCronExpressionCheckTips,
          tvDescription, tvNextTimeList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
