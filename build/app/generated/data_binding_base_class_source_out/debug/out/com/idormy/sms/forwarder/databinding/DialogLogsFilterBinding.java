// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.SmoothCheckBox;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogLogsFilterBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialEditText etContent;

  @NonNull
  public final MaterialEditText etEndTime;

  @NonNull
  public final MaterialEditText etFrom;

  @NonNull
  public final MaterialEditText etStartTime;

  @NonNull
  public final MaterialEditText etTitle;

  @NonNull
  public final LinearLayout layoutCallType;

  @NonNull
  public final LinearLayout layoutSimSlot;

  @NonNull
  public final LinearLayout layoutTitle;

  @NonNull
  public final RadioButton rbSimSlot0;

  @NonNull
  public final RadioButton rbSimSlot1;

  @NonNull
  public final RadioButton rbSimSlot2;

  @NonNull
  public final RadioGroup rgSimSlot;

  @NonNull
  public final SmoothCheckBox scbCallType1;

  @NonNull
  public final SmoothCheckBox scbCallType2;

  @NonNull
  public final SmoothCheckBox scbCallType3;

  @NonNull
  public final SmoothCheckBox scbCallType4;

  @NonNull
  public final SmoothCheckBox scbCallType5;

  @NonNull
  public final SmoothCheckBox scbCallType6;

  @NonNull
  public final SmoothCheckBox scbForwardStatus0;

  @NonNull
  public final SmoothCheckBox scbForwardStatus1;

  @NonNull
  public final SmoothCheckBox scbForwardStatus2;

  private DialogLogsFilterBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialEditText etContent, @NonNull MaterialEditText etEndTime,
      @NonNull MaterialEditText etFrom, @NonNull MaterialEditText etStartTime,
      @NonNull MaterialEditText etTitle, @NonNull LinearLayout layoutCallType,
      @NonNull LinearLayout layoutSimSlot, @NonNull LinearLayout layoutTitle,
      @NonNull RadioButton rbSimSlot0, @NonNull RadioButton rbSimSlot1,
      @NonNull RadioButton rbSimSlot2, @NonNull RadioGroup rgSimSlot,
      @NonNull SmoothCheckBox scbCallType1, @NonNull SmoothCheckBox scbCallType2,
      @NonNull SmoothCheckBox scbCallType3, @NonNull SmoothCheckBox scbCallType4,
      @NonNull SmoothCheckBox scbCallType5, @NonNull SmoothCheckBox scbCallType6,
      @NonNull SmoothCheckBox scbForwardStatus0, @NonNull SmoothCheckBox scbForwardStatus1,
      @NonNull SmoothCheckBox scbForwardStatus2) {
    this.rootView = rootView;
    this.etContent = etContent;
    this.etEndTime = etEndTime;
    this.etFrom = etFrom;
    this.etStartTime = etStartTime;
    this.etTitle = etTitle;
    this.layoutCallType = layoutCallType;
    this.layoutSimSlot = layoutSimSlot;
    this.layoutTitle = layoutTitle;
    this.rbSimSlot0 = rbSimSlot0;
    this.rbSimSlot1 = rbSimSlot1;
    this.rbSimSlot2 = rbSimSlot2;
    this.rgSimSlot = rgSimSlot;
    this.scbCallType1 = scbCallType1;
    this.scbCallType2 = scbCallType2;
    this.scbCallType3 = scbCallType3;
    this.scbCallType4 = scbCallType4;
    this.scbCallType5 = scbCallType5;
    this.scbCallType6 = scbCallType6;
    this.scbForwardStatus0 = scbForwardStatus0;
    this.scbForwardStatus1 = scbForwardStatus1;
    this.scbForwardStatus2 = scbForwardStatus2;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogLogsFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogLogsFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_logs_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogLogsFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.et_content;
      MaterialEditText etContent = ViewBindings.findChildViewById(rootView, id);
      if (etContent == null) {
        break missingId;
      }

      id = R.id.et_end_time;
      MaterialEditText etEndTime = ViewBindings.findChildViewById(rootView, id);
      if (etEndTime == null) {
        break missingId;
      }

      id = R.id.et_from;
      MaterialEditText etFrom = ViewBindings.findChildViewById(rootView, id);
      if (etFrom == null) {
        break missingId;
      }

      id = R.id.et_start_time;
      MaterialEditText etStartTime = ViewBindings.findChildViewById(rootView, id);
      if (etStartTime == null) {
        break missingId;
      }

      id = R.id.et_title;
      MaterialEditText etTitle = ViewBindings.findChildViewById(rootView, id);
      if (etTitle == null) {
        break missingId;
      }

      id = R.id.layout_call_type;
      LinearLayout layoutCallType = ViewBindings.findChildViewById(rootView, id);
      if (layoutCallType == null) {
        break missingId;
      }

      id = R.id.layout_sim_slot;
      LinearLayout layoutSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (layoutSimSlot == null) {
        break missingId;
      }

      id = R.id.layout_title;
      LinearLayout layoutTitle = ViewBindings.findChildViewById(rootView, id);
      if (layoutTitle == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_0;
      RadioButton rbSimSlot0 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot0 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_1;
      RadioButton rbSimSlot1 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot1 == null) {
        break missingId;
      }

      id = R.id.rb_sim_slot_2;
      RadioButton rbSimSlot2 = ViewBindings.findChildViewById(rootView, id);
      if (rbSimSlot2 == null) {
        break missingId;
      }

      id = R.id.rg_sim_slot;
      RadioGroup rgSimSlot = ViewBindings.findChildViewById(rootView, id);
      if (rgSimSlot == null) {
        break missingId;
      }

      id = R.id.scb_call_type1;
      SmoothCheckBox scbCallType1 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType1 == null) {
        break missingId;
      }

      id = R.id.scb_call_type2;
      SmoothCheckBox scbCallType2 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType2 == null) {
        break missingId;
      }

      id = R.id.scb_call_type3;
      SmoothCheckBox scbCallType3 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType3 == null) {
        break missingId;
      }

      id = R.id.scb_call_type4;
      SmoothCheckBox scbCallType4 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType4 == null) {
        break missingId;
      }

      id = R.id.scb_call_type5;
      SmoothCheckBox scbCallType5 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType5 == null) {
        break missingId;
      }

      id = R.id.scb_call_type6;
      SmoothCheckBox scbCallType6 = ViewBindings.findChildViewById(rootView, id);
      if (scbCallType6 == null) {
        break missingId;
      }

      id = R.id.scb_forward_status_0;
      SmoothCheckBox scbForwardStatus0 = ViewBindings.findChildViewById(rootView, id);
      if (scbForwardStatus0 == null) {
        break missingId;
      }

      id = R.id.scb_forward_status_1;
      SmoothCheckBox scbForwardStatus1 = ViewBindings.findChildViewById(rootView, id);
      if (scbForwardStatus1 == null) {
        break missingId;
      }

      id = R.id.scb_forward_status_2;
      SmoothCheckBox scbForwardStatus2 = ViewBindings.findChildViewById(rootView, id);
      if (scbForwardStatus2 == null) {
        break missingId;
      }

      return new DialogLogsFilterBinding((LinearLayout) rootView, etContent, etEndTime, etFrom,
          etStartTime, etTitle, layoutCallType, layoutSimSlot, layoutTitle, rbSimSlot0, rbSimSlot1,
          rbSimSlot2, rgSimSlot, scbCallType1, scbCallType2, scbCallType3, scbCallType4,
          scbCallType5, scbCallType6, scbForwardStatus0, scbForwardStatus1, scbForwardStatus2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
