// Generated by view binder compiler. Do not edit!
package com.idormy.sms.forwarder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.idormy.sms.forwarder.R;
import com.xuexiang.xui.widget.button.switchbutton.SwitchButton;
import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
import com.xuexiang.xui.widget.spinner.materialspinner.MaterialSpinner;
import com.xuexiang.xui.widget.textview.supertextview.SuperButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSendersBarkBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final SuperButton btnDel;

  @NonNull
  public final SuperButton btnSave;

  @NonNull
  public final SuperButton btnTest;

  @NonNull
  public final MaterialEditText etAutoCopyTemplate;

  @NonNull
  public final MaterialEditText etBadge;

  @NonNull
  public final MaterialEditText etEncryptionIv;

  @NonNull
  public final MaterialEditText etEncryptionKey;

  @NonNull
  public final MaterialEditText etGroup;

  @NonNull
  public final MaterialEditText etIcon;

  @NonNull
  public final MaterialEditText etName;

  @NonNull
  public final MaterialEditText etServer;

  @NonNull
  public final MaterialEditText etSound;

  @NonNull
  public final MaterialEditText etTitleTemplate;

  @NonNull
  public final MaterialEditText etUrl;

  @NonNull
  public final GridLayout glAutoCopyTemplate;

  @NonNull
  public final GridLayout glTitleTemplate;

  @NonNull
  public final LinearLayout layoutAutoCopyTemplate;

  @NonNull
  public final LinearLayout layoutCustomTemplate;

  @NonNull
  public final SwitchButton sbCall;

  @NonNull
  public final SwitchButton sbEnable;

  @NonNull
  public final MaterialSpinner spEncryptionAlgorithm;

  @NonNull
  public final MaterialSpinner spLevel;

  private FragmentSendersBarkBinding(@NonNull LinearLayout rootView, @NonNull SuperButton btnDel,
      @NonNull SuperButton btnSave, @NonNull SuperButton btnTest,
      @NonNull MaterialEditText etAutoCopyTemplate, @NonNull MaterialEditText etBadge,
      @NonNull MaterialEditText etEncryptionIv, @NonNull MaterialEditText etEncryptionKey,
      @NonNull MaterialEditText etGroup, @NonNull MaterialEditText etIcon,
      @NonNull MaterialEditText etName, @NonNull MaterialEditText etServer,
      @NonNull MaterialEditText etSound, @NonNull MaterialEditText etTitleTemplate,
      @NonNull MaterialEditText etUrl, @NonNull GridLayout glAutoCopyTemplate,
      @NonNull GridLayout glTitleTemplate, @NonNull LinearLayout layoutAutoCopyTemplate,
      @NonNull LinearLayout layoutCustomTemplate, @NonNull SwitchButton sbCall,
      @NonNull SwitchButton sbEnable, @NonNull MaterialSpinner spEncryptionAlgorithm,
      @NonNull MaterialSpinner spLevel) {
    this.rootView = rootView;
    this.btnDel = btnDel;
    this.btnSave = btnSave;
    this.btnTest = btnTest;
    this.etAutoCopyTemplate = etAutoCopyTemplate;
    this.etBadge = etBadge;
    this.etEncryptionIv = etEncryptionIv;
    this.etEncryptionKey = etEncryptionKey;
    this.etGroup = etGroup;
    this.etIcon = etIcon;
    this.etName = etName;
    this.etServer = etServer;
    this.etSound = etSound;
    this.etTitleTemplate = etTitleTemplate;
    this.etUrl = etUrl;
    this.glAutoCopyTemplate = glAutoCopyTemplate;
    this.glTitleTemplate = glTitleTemplate;
    this.layoutAutoCopyTemplate = layoutAutoCopyTemplate;
    this.layoutCustomTemplate = layoutCustomTemplate;
    this.sbCall = sbCall;
    this.sbEnable = sbEnable;
    this.spEncryptionAlgorithm = spEncryptionAlgorithm;
    this.spLevel = spLevel;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSendersBarkBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSendersBarkBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_senders_bark, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSendersBarkBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_del;
      SuperButton btnDel = ViewBindings.findChildViewById(rootView, id);
      if (btnDel == null) {
        break missingId;
      }

      id = R.id.btn_save;
      SuperButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_test;
      SuperButton btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.et_auto_copy_template;
      MaterialEditText etAutoCopyTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etAutoCopyTemplate == null) {
        break missingId;
      }

      id = R.id.et_badge;
      MaterialEditText etBadge = ViewBindings.findChildViewById(rootView, id);
      if (etBadge == null) {
        break missingId;
      }

      id = R.id.et_encryption_iv;
      MaterialEditText etEncryptionIv = ViewBindings.findChildViewById(rootView, id);
      if (etEncryptionIv == null) {
        break missingId;
      }

      id = R.id.et_encryption_key;
      MaterialEditText etEncryptionKey = ViewBindings.findChildViewById(rootView, id);
      if (etEncryptionKey == null) {
        break missingId;
      }

      id = R.id.et_group;
      MaterialEditText etGroup = ViewBindings.findChildViewById(rootView, id);
      if (etGroup == null) {
        break missingId;
      }

      id = R.id.et_icon;
      MaterialEditText etIcon = ViewBindings.findChildViewById(rootView, id);
      if (etIcon == null) {
        break missingId;
      }

      id = R.id.et_name;
      MaterialEditText etName = ViewBindings.findChildViewById(rootView, id);
      if (etName == null) {
        break missingId;
      }

      id = R.id.et_server;
      MaterialEditText etServer = ViewBindings.findChildViewById(rootView, id);
      if (etServer == null) {
        break missingId;
      }

      id = R.id.et_sound;
      MaterialEditText etSound = ViewBindings.findChildViewById(rootView, id);
      if (etSound == null) {
        break missingId;
      }

      id = R.id.et_title_template;
      MaterialEditText etTitleTemplate = ViewBindings.findChildViewById(rootView, id);
      if (etTitleTemplate == null) {
        break missingId;
      }

      id = R.id.et_url;
      MaterialEditText etUrl = ViewBindings.findChildViewById(rootView, id);
      if (etUrl == null) {
        break missingId;
      }

      id = R.id.gl_auto_copy_template;
      GridLayout glAutoCopyTemplate = ViewBindings.findChildViewById(rootView, id);
      if (glAutoCopyTemplate == null) {
        break missingId;
      }

      id = R.id.gl_title_template;
      GridLayout glTitleTemplate = ViewBindings.findChildViewById(rootView, id);
      if (glTitleTemplate == null) {
        break missingId;
      }

      id = R.id.layout_auto_copy_template;
      LinearLayout layoutAutoCopyTemplate = ViewBindings.findChildViewById(rootView, id);
      if (layoutAutoCopyTemplate == null) {
        break missingId;
      }

      id = R.id.layout_custom_template;
      LinearLayout layoutCustomTemplate = ViewBindings.findChildViewById(rootView, id);
      if (layoutCustomTemplate == null) {
        break missingId;
      }

      id = R.id.sb_call;
      SwitchButton sbCall = ViewBindings.findChildViewById(rootView, id);
      if (sbCall == null) {
        break missingId;
      }

      id = R.id.sb_enable;
      SwitchButton sbEnable = ViewBindings.findChildViewById(rootView, id);
      if (sbEnable == null) {
        break missingId;
      }

      id = R.id.sp_encryption_algorithm;
      MaterialSpinner spEncryptionAlgorithm = ViewBindings.findChildViewById(rootView, id);
      if (spEncryptionAlgorithm == null) {
        break missingId;
      }

      id = R.id.sp_level;
      MaterialSpinner spLevel = ViewBindings.findChildViewById(rootView, id);
      if (spLevel == null) {
        break missingId;
      }

      return new FragmentSendersBarkBinding((LinearLayout) rootView, btnDel, btnSave, btnTest,
          etAutoCopyTemplate, etBadge, etEncryptionIv, etEncryptionKey, etGroup, etIcon, etName,
          etServer, etSound, etTitleTemplate, etUrl, glAutoCopyTemplate, glTitleTemplate,
          layoutAutoCopyTemplate, layoutCustomTemplate, sbCall, sbEnable, spEncryptionAlgorithm,
          spLevel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
